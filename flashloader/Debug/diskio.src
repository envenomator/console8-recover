; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\src_fatfs\diskio.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",558
.DEFINE "fs_type"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pdrv"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fats"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "wflag"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fsi_flag"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "id"
.VALUE 5
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "n_rootdir"
.VALUE 7
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "csize"
.VALUE 9
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "lfnbuf"
.VALUE 11
.CLASS 8
.TYPE 45
.ENDEF
.DEFINE "cdir"
.VALUE 14
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "n_fatent"
.VALUE 18
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fsize"
.VALUE 22
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "volbase"
.VALUE 26
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fatbase"
.VALUE 30
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dirbase"
.VALUE 34
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "database"
.VALUE 38
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "winsect"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "win"
.VALUE 46
.CLASS 8
.DIM 512
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 40
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",541
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "buf"
.VALUE 29
.CLASS 8
.DIM 512
.TYPE 108
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",46
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "dptr"
.VALUE 15
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 19
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 23
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir"
.VALUE 27
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "fn"
.VALUE 30
.CLASS 8
.DIM 12
.TYPE 108
.ENDEF
.DEFINE "blk_ofs"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",278
.DEFINE "fsize"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fdate"
.VALUE 4
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "ftime"
.VALUE 6
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "fattrib"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "altname"
.VALUE 9
.CLASS 8
.DIM 13
.TYPE 98
.ENDEF
.DEFINE "fname"
.VALUE 22
.CLASS 8
.DIM 256
.TYPE 98
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",12
.DEFINE "fmt"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fat"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "align"
.VALUE 2
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "n_root"
.VALUE 5
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "au_size"
.VALUE 8
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME5"
	SEGMENT BSS
_rtc:
	DS	1
.DEFINE "rtc"
.ALIAS "_rtc"
.CLASS 83
.VALUE _rtc
.TYPE 12
.ENDEF
;    1	/*
;    2	 * Title:			AGON Low level disk I/O module for FatFs 
;    3	 * Modified By:		Dean Belfield
;    4	 * Created:			19/06/2022
;    5	 * Last Updated:	15/03/2023
;    6	 *
;    7	 * Credits:
;    8	 * Based upon a skeleton framework (C)ChaN, 2019
;    9	 *
;   10	 * Modinfo:
;   11	 * 11/07/2023:		Tweaked to compile without ZDL enabled in project settings
;   12	 * 15/03/2023:		Added get_fattime
;   13	 */
;   14	
;   15	#include "ff.h"			// Obtains integer types
;   16	#include "diskio.h"		// Declarations of disk functions
;   17	
;   18	#include "sd.h"			// Physical SD card layer for eZ80
;   19	//#include "clock.h"		// Clock for timestamp
;   20	
;   21	BYTE rtc;		// will not work here
	SEGMENT CODE
;   22	
;   23	// Get Drive Status (Not implemented in AGON)
;   24	// Parameters:
;   25	// - pdrv: Physical drive number to identify the drive
;   26	// Returns:
;   27	// - DSTATUS
;   28	// 
;   29	DSTATUS disk_status(BYTE pdrv) {
_disk_status:
.DEFINE "_disk_status"

.VALUE _disk_status

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "disk_status",29,"_disk_status"

.LINE 29

.DEFINE "pdrv"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   30		return 0;
.LINE 30

	XOR	A,A
;   31	}
.LINE 31

	LD	SP,IX
	POP	IX
	RET	


;**************************** _disk_status ***************************
;Name                         Addr/Register   Size   Type
;pdrv                                  IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "disk_status",31,"_disk_status"
;   32	
;   33	// Initialise a drive
;   34	// Parameters:
;   35	// - pdrv: Physical drive number to identify the drive
;   36	// Returns:
;   37	// - DSTATUS
;   38	//
;   39	DSTATUS disk_initialize(BYTE pdrv) {
_disk_initialize:
.DEFINE "_disk_initialize"

.VALUE _disk_initialize

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "disk_initialize",39,"_disk_initialize"

.LINE 39

.DEFINE "pdrv"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "err"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;   40		BYTE err = SD_init();
.LINE 40

	CALL	_SD_init
	LD	(IX+%FFFFFFFF),A
;   41		if(err == SD_SUCCESS) {
.LINE 41

	OR	A,A
	JR	NZ,L_2
;   42			return RES_OK;
.LINE 42

	XOR	A,A
	JR	L_3
;   43		}
L_2:
.LINE 43

;   44		return RES_ERROR;
.LINE 44

	LD	A,%1
;   45	}
L_3:
.LINE 45

	LD	SP,IX
	POP	IX
	RET	


;**************************** _disk_initialize ***************************
;Name                         Addr/Register   Size   Type
;_SD_init                            IMPORT  -----   function
;err                                   IX-1      1   variable
;pdrv                                  IX+6      1   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "disk_initialize",45,"_disk_initialize"
;   46	
;   47	// Read Sector(s)
;   48	// Parameters:
;   49	// - pdrv: Physical drive nmuber to identify the drive
;   50	// - buff: Data buffer to store read data
;   51	// - sector: Start sector in LBA
;   52	// - count: Number of sectors to read
;   53	// Returns:
;   54	// - DSTATUS
;   55	//
;   56	DRESULT disk_read(BYTE pdrv, BYTE *buff, LBA_t sector, UINT count) {
_disk_read:
.DEFINE "_disk_read"

.VALUE _disk_read

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "disk_read",56,"_disk_read"

.LINE 56

.DEFINE "pdrv"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "buff"

.CLASS 65

.VALUE 9

.TYPE 44

.ENDEF

.DEFINE "sector"

.CLASS 65

.VALUE 12

.TYPE 15

.ENDEF

.DEFINE "count"

.CLASS 65

.VALUE 18

.TYPE 14

.ENDEF

.DEFINE "err"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;   57		BYTE err = SD_readBlocks(sector, buff, count);
.LINE 57

	LD	BC,(IX+%12)
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	LD	C,(IX+%F)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%C)
	PUSH	BC
	CALL	_SD_readBlocks
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;   58		if(err == SD_SUCCESS) {
.LINE 58

	OR	A,A
	JR	NZ,L_5
;   59			return RES_OK;
.LINE 59

	OR	A,A
	SBC	HL,HL
	JR	L_6
;   60		}
L_5:
.LINE 60

;   61		return RES_ERROR;
.LINE 61

	LD	HL,1
;   62	}
L_6:
.LINE 62

	LD	SP,IX
	POP	IX
	RET	


;**************************** _disk_read ***************************
;Name                         Addr/Register   Size   Type
;_SD_readBlocks                      IMPORT  -----   function
;err                                   IX-1      1   variable
;count                                IX+18      3   parameter
;sector                               IX+12      4   parameter
;buff                                  IX+9      3   parameter
;pdrv                                  IX+6      1   parameter


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "disk_read",62,"_disk_read"
;   63	
;   64	#if FF_FS_READONLY == 0
;   65	
;   66	// Write Sector(s)
;   67	// Parameters:
;   68	// - pdrv: Physical drive nmuber to identify the drive
;   69	// - buff: Data to be written
;   70	// - sector: Start sector in LBA
;   71	// - count: Number of sectors to write
;   72	// Returns:
;   73	// - DSTATUS
;   74	//
;   75	DRESULT disk_write(BYTE pdrv, const BYTE *buff, LBA_t sector, UINT count){
;   76		BYTE err = SD_writeBlocks(sector, buff, count);
;   77		if(err == SD_SUCCESS) {
;   78			return RES_OK;
;   79		}
;   80		
;   81		return RES_ERROR;
;   82	}
;   83	
;   84	#endif
;   85	
;   86	// Disk I/O Control (Not implemented in AGON)
;   87	// Parameters:
;   88	// - pdrv: Physical drive nmuber (0..)
;   89	// - cmd: Control code
;   90	// - buff: Buffer to send/receive control data
;   91	// Returns:
;   92	// - DSTATUS
;   93	//
;   94	DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
_disk_ioctl:
.DEFINE "_disk_ioctl"

.VALUE _disk_ioctl

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "disk_ioctl",94,"_disk_ioctl"

.LINE 94

.DEFINE "pdrv"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

.DEFINE "cmd"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "buff"

.CLASS 65

.VALUE 12

.TYPE 33

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   95		return RES_OK;
.LINE 95

	OR	A,A
	SBC	HL,HL
;   96	}
.LINE 96

	LD	SP,IX
	POP	IX
	RET	


;**************************** _disk_ioctl ***************************
;Name                         Addr/Register   Size   Type
;buff                                 IX+12      3   parameter
;cmd                                   IX+9      1   parameter
;pdrv                                  IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "disk_ioctl",96,"_disk_ioctl"
;   97	
;   98	// Get RTC time for filestamps
;   99	// Returns:
;  100	// - TIME (bit packed)
;  101	//
;  102	//    0 to  4: Seconds/2 (0 to 29)
;  103	//    5 to 10: Minutes (0 to 59)
;  104	//   11 to 15: Hours (0 to 23)
;  105	//   16 to 20: Day of Month (1 to 31)
;  106	//   21 to 24: Month (1 to 12)
;  107	//   25 to 31: Year-1980 (0 to 127)
;  108	//
;  109	DWORD get_fattime(void) {
_get_fattime:
.DEFINE "_get_fattime"

.VALUE _get_fattime

.CLASS 2

.TYPE 79

.ENDEF

.BEGFUNC "get_fattime",109,"_get_fattime"

.LINE 109

.DEFINE "yr"

.CLASS 65

.VALUE -4

.TYPE 15

.ENDEF

.DEFINE "mo"

.CLASS 65

.VALUE -8

.TYPE 15

.ENDEF

.DEFINE "da"

.CLASS 65

.VALUE -12

.TYPE 15

.ENDEF

.DEFINE "hr"

.CLASS 65

.VALUE -16

.TYPE 15

.ENDEF

.DEFINE "mi"

.CLASS 65

.VALUE -20

.TYPE 15

.ENDEF

.DEFINE "se"

.CLASS 65

.VALUE -24

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFE8
	LD	SP,HL
;  110		DWORD	yr, mo, da, hr, mi, se;
;  111		BYTE *	p = &rtc;
;  112	
;  113		//rtc_update();
;  114	
;  115		yr =  *(p+0)    << 25;
.LINE 115

	UEXT	HL
	LD	A,(_rtc)
	LD	L,A
	LD	A,H
	LD	BC,HL
	LD	L,%19
	CALL	__lshl
	LD	(IX+%FFFFFFFC),BC
	LD	(IX+%FFFFFFFF),A
;  116		mo = (*(p+1)+1) << 21;
.LINE 116

	LD	IY,_rtc
	UEXT	HL
	LD	L,(IY+%1)
	LD	E,H
	LD	A,%1
	CALL	__ladd_b
	LD	A,E
	LD	BC,HL
	LD	L,%15
	CALL	__lshl
	LD	(IX+%FFFFFFF8),BC
	LD	(IX+%FFFFFFFB),A
;  117		da =  *(p+2)    << 16;
.LINE 117

	UEXT	HL
	LD	L,(IY+%2)
	LD	A,H
	LD	BC,HL
	LD	L,%10
	CALL	__lshl
	LD	(IX+%FFFFFFF4),BC
	LD	(IX+%FFFFFFF7),A
;  118		hr =  *(p+5)    << 11;
.LINE 118

	UEXT	HL
	LD	L,(IY+%5)
	LD	A,H
	LD	BC,HL
	LD	L,%B
	CALL	__lshl
	LD	(IX+%FFFFFFF0),BC
	LD	(IX+%FFFFFFF3),A
;  119		mi =  *(p+6)    <<  5;
.LINE 119

	UEXT	HL
	LD	L,(IY+%6)
	LD	A,H
	LD	BC,HL
	LD	L,%5
	CALL	__lshl
	LD	(IX+%FFFFFFEC),BC
	LD	(IX+%FFFFFFEF),A
;  120		se =  *(p+7)    >>  1;
.LINE 120

	LEA	HL,IY+%7
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,%1
	CALL	__ishrs_b
	LD	BC,HL
	CALL	__itol
	LD	(IX+%FFFFFFE8),BC
	LD	(IX+%FFFFFFEB),A
;  121	
;  122		return se | mi | hr | da | mo | yr;
.LINE 122

	LD	HL,(IX+%FFFFFFEC)
	LD	E,(IX+%FFFFFFEF)
	LD	A,(IX+%FFFFFFEB)
	CALL	__lor
	LD	BC,(IX+%FFFFFFF0)
	LD	A,(IX+%FFFFFFF3)
	CALL	__lor
	LD	BC,(IX+%FFFFFFF4)
	LD	A,(IX+%FFFFFFF7)
	CALL	__lor
	LD	BC,(IX+%FFFFFFF8)
	LD	A,(IX+%FFFFFFFB)
	CALL	__lor
	LD	BC,(IX+%FFFFFFFC)
	LD	A,(IX+%FFFFFFFF)
	CALL	__lor
;  123	}
.LINE 123

	LD	SP,IX
	POP	IX
	RET	


;**************************** _get_fattime ***************************
;Name                         Addr/Register   Size   Type
;_rtc                                STATIC      1   variable
;se                                   IX-24      4   variable
;mi                                   IX-20      4   variable
;hr                                   IX-16      4   variable
;da                                   IX-12      4   variable
;mo                                    IX-8      4   variable
;yr                                    IX-4      4   variable


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "get_fattime",123,"_get_fattime"
	XREF _SD_init:ROM
	XREF _SD_readBlocks:ROM
	XREF __lor:ROM
	XREF __lshl:ROM
	XREF __itol:ROM
	XREF __ladd_b:ROM
	XREF __ishrs_b:ROM
	XDEF _get_fattime
	XDEF _disk_ioctl
	XDEF _disk_read
	XDEF _disk_initialize
	XDEF _disk_status
	XDEF _rtc
	END
