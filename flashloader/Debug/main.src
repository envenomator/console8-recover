; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",558
.DEFINE "fs_type"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pdrv"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fats"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "wflag"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fsi_flag"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "id"
.VALUE 5
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "n_rootdir"
.VALUE 7
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "csize"
.VALUE 9
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "lfnbuf"
.VALUE 11
.CLASS 8
.TYPE 45
.ENDEF
.DEFINE "cdir"
.VALUE 14
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "n_fatent"
.VALUE 18
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fsize"
.VALUE 22
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "volbase"
.VALUE 26
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fatbase"
.VALUE 30
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dirbase"
.VALUE 34
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "database"
.VALUE 38
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "winsect"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "win"
.VALUE 46
.CLASS 8
.DIM 512
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 40
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",541
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "buf"
.VALUE 29
.CLASS 8
.DIM 512
.TYPE 108
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",46
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME1"
.TYPE 8
.ENDEF
.DEFINE "dptr"
.VALUE 15
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 19
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 23
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir"
.VALUE 27
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "fn"
.VALUE 30
.CLASS 8
.DIM 12
.TYPE 108
.ENDEF
.DEFINE "blk_ofs"
.VALUE 42
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",278
.DEFINE "fsize"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "fdate"
.VALUE 4
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "ftime"
.VALUE 6
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "fattrib"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "altname"
.VALUE 9
.CLASS 8
.DIM 13
.TYPE 98
.ENDEF
.DEFINE "fname"
.VALUE 22
.CLASS 8
.DIM 256
.TYPE 98
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",12
.DEFINE "fmt"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "n_fat"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "align"
.VALUE 2
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "n_root"
.VALUE 5
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "au_size"
.VALUE 8
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME5"
	SEGMENT BSS
_fs:
	DS	558
.DEFINE "fs"
.ALIAS "_fs"
.CLASS 83
.VALUE _fs
.TAG "NONAME0"
.TYPE 8
.ENDEF
;    1	#include <ez80.h>
;    2	#include "src_fatfs\ff.h"
;    3	#include "spi.h"
;    4	#include "defines.h"
;    5	#include <stdint.h>
;    6	#include "agontimer.h"
;    7	
;    8	#define PAGESIZE	1024
;    9	#define FLASHPAGES	128
;   10	#define FLASHSTART	0x0
;   11	
;   12	#define MOSFILENAME	"MOS.bin"
;   13	#define LOADADDRESS	0x50000
;   14	
;   15	extern void enableFlashKeyRegister(void);
;   16	extern void lockFlashKeyRegister(void);
;   17	extern void fastmemcpy(UINT24 destination, UINT24 source, UINT24 size);
;   18	extern void reset(void);
;   19	
;   20	FATFS 	fs;
	SEGMENT CODE
;   21	
;   22	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",22,"_main"

.LINE 22

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "counter"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

.DEFINE "pagemax"

.CLASS 65

.VALUE -6

.TYPE 14

.ENDEF

.DEFINE "addressto"

.CLASS 65

.VALUE -9

.TYPE 14

.ENDEF

.DEFINE "addressfrom"

.CLASS 65

.VALUE -12

.TYPE 14

.ENDEF

.DEFINE "mossize"

.CLASS 65

.VALUE -15

.TYPE 14

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE -16

.TYPE 12

.ENDEF

.DEFINE "lastpagebytes"

.CLASS 65

.VALUE -19

.TYPE 14

.ENDEF

.DEFINE "frmos"

.CLASS 65

.VALUE -22

.TYPE 4

.ENDEF

.DEFINE "br"

.CLASS 65

.VALUE -28

.TYPE 14

.ENDEF

.DEFINE "filmos"

.CLASS 65

.VALUE -569

.TAG "NONAME2"

.TYPE 8

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LD	HL,-569
	ADD	HL,SP
	LD	SP,HL
;   23		FRESULT	frmos;
;   24		FIL	   	filmos;
;   25		UINT24  br;	
;   26		UINT24  mossize;
;   27		
;   28		UINT24	counter,pagemax, lastpagebytes;
;   29		UINT24 addressto,addressfrom;
;   30		UINT8	value;
;   31	
;   32		init_spi();
.LINE 32

	CALL	_init_spi
;   33	
;   34		f_mount(&fs, "", 1);
.LINE 34

	LD	BC,1
	PUSH	BC
	LD	BC,L__0
	PUSH	BC
	LD	BC,_fs
	PUSH	BC
	CALL	_f_mount
	POP	BC
	POP	BC
	POP	BC
;   35	
;   36		addressto = FLASHSTART;
.LINE 36

	LD	BC,0
	LD	(IX+%FFFFFFF7),BC
;   37		addressfrom = LOADADDRESS;
.LINE 37

	LD	BC,327680
	LD	(IX+%FFFFFFF4),BC
;   38	
;   39		frmos= f_open(&filmos, MOSFILENAME, FA_READ);
.LINE 39

	LD	BC,1
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	LD	HL,IX
	LD	BC,-569
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_f_open
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFEA),HL
;   40		if(frmos != FR_OK) while(1);
.LINE 40

	CALL	__icmpzero
	JR	Z,L_3
L_1:
	JR	L_1
L_3:
;   41		mossize = f_size(&filmos);
.LINE 41

	LD	BC,-558
	CALL	__ildix
	LD	(IX+%FFFFFFF1),HL
;   42	
;   43		frmos= f_read(&filmos, (void *)LOADADDRESS, mossize, &br);
.LINE 43

	PEA	IX+%FFFFFFE4
	LD	BC,HL
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	LD	HL,IX
	LD	BC,-569
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_f_read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFEA),HL
;   44	
;   45		f_close(&filmos);
.LINE 45

	LD	HL,IX
	LD	BC,-569
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_f_close
	POP	BC
;   46	
;   47		// Unprotect and erase flash
;   48		enableFlashKeyRegister();	// unlock Flash Key Register, so we can write to the Flash Write/Erase protection registers
.LINE 48

	CALL	_enableFlashKeyRegister
;   49		FLASH_PROT = 0;				// disable protection on all 8x16KB blocks in the flash
.LINE 49

	XOR	A,A
	OUT0	(250),A
;   50		enableFlashKeyRegister();	// will need to unlock again after previous write to the flash protection register
.LINE 50

	CALL	_enableFlashKeyRegister
;   51		FLASH_FDIV = 0x5F;			// Ceiling(18Mhz * 5,1us) = 95, or 0x5F
.LINE 51

	LD	A,%5F
	OUT0	(249),A
;   52	
;   53		// Mass erase flash
;   54		FLASH_PGCTL = 0x01;	// mass erase bit enable, start erase all pages
.LINE 54

	LD	A,%1
	OUT0	(255),A
;   55		do {
L_4:
.LINE 55

;   56			value = FLASH_PGCTL;
.LINE 56

	IN0	A,(255)
	LD	(IX+%FFFFFFF0),A
;   57		} while(value & 0x01); // wait for completion of erase
.LINE 57

	AND	A,%1
	JR	NZ,L_4
;   58	
;   59		// determine number of pages to write
;   60		pagemax = mossize/PAGESIZE;
.LINE 60

	LD	HL,(IX+%FFFFFFF1)
	LD	A,%A
	CALL	__ishru_b
	LD	(IX+%FFFFFFFA),HL
;   61		if(mossize%PAGESIZE) // last page has less than PAGESIZE bytes
.LINE 61

	LD	BC,1023
	LD	HL,(IX+%FFFFFFF1)
	CALL	__iand
	LD	(IX+%FFFFFFE7),HL
	CALL	__icmpzero
	JR	Z,L_8
;   62		{
;   63			pagemax += 1;
.LINE 63

	LD	BC,(IX+%FFFFFFFA)
	INC	BC
	LD	(IX+%FFFFFFFA),BC
;   64			lastpagebytes = mossize%PAGESIZE;			
.LINE 64

	LD	BC,(IX+%FFFFFFE7)
	LD	(IX+%FFFFFFED),BC
;   65		}
;   66		else lastpagebytes = PAGESIZE; // normal last page
.LINE 66

	JR	L_16
L_8:
	LD	BC,1024
	LD	(IX+%FFFFFFED),BC
L_16:
;   67	
;   68		// write out each page to flash
;   69		for(counter = 0; counter < pagemax; counter++)
.LINE 69

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_15
L_13:
;   70		{
;   71			if(counter == (pagemax - 1)) // last page to write - might need to write less than PAGESIZE
.LINE 71

	LD	IY,(IX+%FFFFFFFA)
	LEA	HL,IY+%FFFFFFFF
	LD	BC,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_11
;   72				fastmemcpy(addressto,addressfrom,lastpagebytes);				
.LINE 72

	LD	BC,(IX+%FFFFFFED)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF4)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF7)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
;   73			else 
.LINE 73

	JR	L_12
L_11:
;   74				fastmemcpy(addressto,addressfrom,PAGESIZE);
.LINE 74

	LD	BC,1024
	PUSH	BC
	LD	BC,(IX+%FFFFFFF4)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF7)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
L_12:
;   75		
;   76			addressto += PAGESIZE;
.LINE 76

	LD	BC,1024
	LD	HL,(IX+%FFFFFFF7)
	ADD	HL,BC
	LD	(IX+%FFFFFFF7),HL
;   77			addressfrom += PAGESIZE;
.LINE 77

	LD	HL,(IX+%FFFFFFF4)
	ADD	HL,BC
	LD	(IX+%FFFFFFF4),HL
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;   78		}
L_15:
.LINE 78

	LD	BC,(IX+%FFFFFFFA)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_13
;   79		lockFlashKeyRegister();	// lock the flash before WARM reset
.LINE 79

	CALL	_lockFlashKeyRegister
;   80	
;   81		reset();
.LINE 81

	CALL	_reset
;   82		return 0;
.LINE 82

	OR	A,A
	SBC	HL,HL
;   83	}
.LINE 83

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_reset                              IMPORT  -----   function
;_lockFlashKeyRegister               IMPORT  -----   function
;_fastmemcpy                         IMPORT  -----   function
;_enableFlashKeyRegister             IMPORT  -----   function
;_f_close                            IMPORT  -----   function
;_f_read                             IMPORT  -----   function
;_f_open                             IMPORT  -----   function
;_fs                                 STATIC    558   variable
;_f_mount                            IMPORT  -----   function
;_init_spi                           IMPORT  -----   function
;filmos                              IX-569    541   variable
;br                                   IX-28      3   variable
;G_0                                  IX-25      3   variable
;frmos                                IX-22      3   variable
;lastpagebytes                        IX-19      3   variable
;value                                IX-16      1   variable
;mossize                              IX-15      3   variable
;addressfrom                          IX-12      3   variable
;addressto                             IX-9      3   variable
;pagemax                               IX-6      3   variable
;counter                               IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 581 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",83,"_main"
	SEGMENT STRSECT
L__0:
	DB	0
L__1:
	DB	"MOS.bin"
	DB	0
	XREF _reset:ROM
	XREF _fastmemcpy:ROM
	XREF _lockFlashKeyRegister:ROM
	XREF _enableFlashKeyRegister:ROM
	XREF _init_spi:ROM
	XREF _f_mount:ROM
	XREF _f_read:ROM
	XREF _f_close:ROM
	XREF _f_open:ROM
	XREF __iand:ROM
	XREF __ildix:ROM
	XREF __icmpzero:ROM
	XREF __ishru_b:ROM
	XDEF _main
	XDEF _fs
	END
