; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\protocol.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
;    1	#include "protocol.h"
;    2	
;    3	//#define UART_LSR_TEMT	0x40
;    4	// Blocking non-interrupt putch to UART0
;    5	int putch(int c)
;    6	{
_putch:
.DEFINE "_putch"

.VALUE _putch

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "putch",6,"_putch"

.LINE 6

.DEFINE "c"

.CLASS 65

.VALUE 6

.TYPE 4

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
.ENDEF

;    7		while((UART0_LSR & UART_LSR_TEMT) == 0);
L_1:
.LINE 7

	IN0	A,(197)
	AND	A,%40
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_1
;    8		while(PD_DR & 0x08); // wait for CTS to go low
L_3:
.LINE 8

	IN0	A,(162)
	AND	A,%8
	JR	NZ,L_3
;    9		UART0_THR = c;
.LINE 9

	LD	A,(IX+%6)
	OUT0	(192),A
;   10		return c;
.LINE 10

	LD	HL,(IX+%6)
;   11	}
.LINE 11

	LD	SP,IX
	POP	IX
	RET	


;**************************** _putch ***************************
;Name                         Addr/Register   Size   Type
;c                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "putch",11,"_putch"
;   12	
;   13	void sendStatus(char state, UINT8 status, UINT32 result) {
_sendStatus:
.DEFINE "_sendStatus"

.VALUE _sendStatus

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "sendStatus",13,"_sendStatus"

.LINE 13

.DEFINE "state"

.CLASS 65

.VALUE 6

.TYPE 2

.ENDEF

.DEFINE "status"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "result"

.CLASS 65

.VALUE 12

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   14		putch(state);
.LINE 14

	LD	A,(IX+%6)
	SEXT	HL
	LD	L,(IX+%6)
	PUSH	HL
	CALL	_putch
	POP	BC
;   15		putch(status);
.LINE 15

	LD	A,(IX+%9)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   16		putch((result) & 0xFF);
.LINE 16

	LD	HL,(IX+%C)
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   17		putch((result >> 8) & 0xFF);
.LINE 17

	LD	BC,(IX+%C)
	LD	A,(IX+%F)
	LD	L,%8
	CALL	__lshru
	LD	HL,BC
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   18		putch((result >> 16) & 0xFF);
.LINE 18

	LD	BC,(IX+%C)
	LD	A,(IX+%F)
	LD	L,%10
	CALL	__lshru
	LD	HL,BC
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   19		putch((result >> 24) & 0xFF);
.LINE 19

	LD	A,(IX+%F)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   20	}
.LINE 20

	LD	SP,IX
	POP	IX
	RET	


;**************************** _sendStatus ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;result                               IX+12      4   parameter
;status                                IX+9      1   parameter
;state                                 IX+6      1   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "sendStatus",20,"_sendStatus"
;   21	
;   22	UCHAR read_UART0(CHAR *pData, int *nbytes) {
_read_UART0:
.DEFINE "_read_UART0"

.VALUE _read_UART0

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "read_UART0",22,"_read_UART0"

.LINE 22

.DEFINE "pData"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "nbytes"

.CLASS 65

.VALUE 9

.TYPE 36

.ENDEF

.DEFINE "status"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "lsr"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "index"

.CLASS 65

.VALUE -5

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
	DEC	SP
;   23		UCHAR lsr ;
;   24		UCHAR status = UART_ERR_NONE ;
.LINE 24

	LD	(IX+%FFFFFFFF),%0
;   25		int   index = 0 ;
.LINE 25

	LD	BC,0
	LD	(IX+%FFFFFFFB),BC
;   26	
;   27		while( UART_ERR_NONE == status ) {
.LINE 27

	JR	L_20
L_21:
;   28			lsr = UART0_LSR ;											//! Read the line status.
.LINE 28

	IN0	A,(197)
	LD	(IX+%FFFFFFFE),A
;   29			
;   30			if( 0 != (lsr & UART_LSR_BREAKINDICATIONERR) ) {			//! Check if there is any Break Indication Error.
.LINE 30

	AND	A,%10
	JR	Z,L_10
;   31				status = UART_ERR_BREAKINDICATIONERR ;					//! Failure code.
.LINE 31

	LD	(IX+%FFFFFFFF),%5
;   32			}
L_10:
.LINE 32

;   33			if( 0 != (lsr & UART_LSR_FRAMINGERR) ) {					//! Check if there is any Framing error.
.LINE 33

	LD	A,(IX+%FFFFFFFE)
	AND	A,%8
	JR	Z,L_12
;   34				status = UART_ERR_FRAMINGERR ;							//! Failure code.
.LINE 34

	LD	(IX+%FFFFFFFF),%2
;   35			}
L_12:
.LINE 35

;   36			if( 0 != (lsr & UART_LSR_PARITYERR) ) {						//! Check if there is any Parity error.
.LINE 36

	LD	A,(IX+%FFFFFFFE)
	AND	A,%4
	JR	Z,L_14
;   37				status = UART_ERR_PARITYERR ;							//! Failure code.
.LINE 37

	LD	(IX+%FFFFFFFF),%3
;   38			}
L_14:
.LINE 38

;   39			if( 0 != (lsr & UART_LSR_OVERRRUNERR) )	{					//! Check if there is any Overrun error.
.LINE 39

	LD	A,(IX+%FFFFFFFE)
	AND	A,%2
	JR	Z,L_17
;   40				status = UART_ERR_OVERRUNERR ;							//! Failure code.
.LINE 40

	LD	(IX+%FFFFFFFF),%4
;   41			}
L_17:
.LINE 41

;   42			if( 0 != (lsr & UART_LSR_DATA_READY) ) {					//! See if there is any data byte to be read.
.LINE 42

	LD	A,(IX+%FFFFFFFE)
	AND	A,%1
	JR	Z,L_19
;   43				pData[ index++ ] = UART0_RBR ;							//! Read it from the receive buffer register.
.LINE 43

	LD	BC,(IX+%FFFFFFFB)
	LD	HL,(IX+%6)
	ADD	HL,BC
	IN0	A,(192)
	LD	(HL),A
	LD	BC,(IX+%FFFFFFFB)
	INC	BC
	LD	(IX+%FFFFFFFB),BC
;   44			}
L_19:
.LINE 44

;   45			if( index == (*nbytes) ) {									//! On completion break the while loop.
.LINE 45

	LD	HL,(IX+%9)
	LD	BC,(IX+%FFFFFFFB)
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_22
;   46				break ;
;   47			}
;   48		}
L_20:
.LINE 48

	LD	A,(IX+%FFFFFFFF)
	OR	A,A
	JR	Z,L_21
L_22:
;   49		*nbytes = index ;
.LINE 49

	LD	HL,(IX+%9)
	LD	BC,(IX+%FFFFFFFB)
	LD	(HL),BC
;   50		return status ;
.LINE 50

	LD	A,(IX+%FFFFFFFF)
;   51		
;   52	}
.LINE 52

	LD	SP,IX
	POP	IX
	RET	


;**************************** _read_UART0 ***************************
;Name                         Addr/Register   Size   Type
;index                                 IX-5      3   variable
;lsr                                   IX-2      1   variable
;status                                IX-1      1   variable
;nbytes                                IX+9      3   parameter
;pData                                 IX+6      3   parameter


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "read_UART0",52,"_read_UART0"
;   53	
;   54	int getch(void) {
_getch:
.DEFINE "_getch"

.VALUE _getch

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "getch",54,"_getch"

.LINE 54

.DEFINE "nbytes"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "ch"

.CLASS 65

.VALUE -4

.TYPE 2

.ENDEF

.DEFINE "status"

.CLASS 65

.VALUE -5

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
	DEC	SP
;   55		CHAR ch;
;   56		int nbytes = 1;
.LINE 56

	LD	BC,1
	LD	(IX+%FFFFFFFD),BC
;   57		UCHAR status = read_UART0(&ch, &nbytes);
.LINE 57

	PEA	IX+%FFFFFFFD
	PEA	IX+%FFFFFFFC
	CALL	_read_UART0
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFB),A
;   58		nbytes = (UINT)ch;
.LINE 58

	LD	A,(IX+%FFFFFFFC)
	SEXT	HL
	LD	L,(IX+%FFFFFFFC)
	LD	(IX+%FFFFFFFD),HL
;   59		nbytes = (nbytes & 0x0000FF);
.LINE 59

	LD	A,(IX+%FFFFFFFD)
	UEXT	HL
	LD	L,A
	LD	(IX+%FFFFFFFD),HL
;   60		return (UART_ERR_NONE!=status) ? -1 : nbytes;
.LINE 60

	LD	A,(IX+%FFFFFFFB)
	OR	A,A
	JR	Z,L_26
	LD	BC,16777215
	LD	(IX+%FFFFFFF8),BC
	JR	L_27
L_26:
	LD	BC,(IX+%FFFFFFFD)
	LD	(IX+%FFFFFFF8),BC
L_27:
	LD	HL,(IX+%FFFFFFF8)
;   61	}
.LINE 61

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getch ***************************
;Name                         Addr/Register   Size   Type
;temp24                                IX-8      3   variable
;status                                IX-5      1   variable
;ch                                    IX-4      1   variable
;nbytes                                IX-3      3   variable


; Stack Frame Size: 14 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getch",61,"_getch"
	XREF __lshru:ROM
	XREF __icmpzero:ROM
	XDEF _getch
	XDEF _read_UART0
	XDEF _sendStatus
	XDEF _putch
	END
