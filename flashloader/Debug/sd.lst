Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED25-Oct-23     18:17:57     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\sd.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    ;    1	/*
                           A    94    ;    2	 * Title:			AGON MOS - Low leve
                           A    95    ;    3	 * Author:			RJH
                           A    96    ;    4	 * Modified by:		Dean Belfield
                           A    97    ;    5	 * Created:			19/06/2022
                           A    98    ;    6	 * Last Updated:	09/03/2023
                           A    99    ;    7	 * 
                           A   100    ;    8	 * Code taken from this article: http:/
                           A   101    ;    9	 *
                           A   102    ;   10	 * Modinfo:
                           A   103    ;   11	 * 11/07/2022:		Now includes define
                           A   104    ;   12	 * 13/07/2022:		Fixed bug in SD_wri
                           A   105    ;   13	 * 09/03/2023:      Now uses wait_timer
                           A   106    ;   14	 */
                           A   107    ;   15	
                           A   108    ;   16	#include <eZ80.h>
                           A   109    ;   17	#include <defines.h>
                           A   110    ;   18	
                           A   111    ;   19	#include <stdio.h>
                           A   112    ;   20	#include <String.h>
                           A   113    ;   21	
                           A   114    ;   22	#include "spi.h"
                           A   115    ;   23	#include "sd.h"
                           A   116    ;   24	#include "timer.h"
                           A   117    ;   25	
                           A   118    ;   26	void SD_command(BYTE cmd, DWORD arg, BY
0402A9                     A   119    _SD_command:
                           A   120    .DEFINE "_SD_command"
                           A   121    
                           A   122    .VALUE _SD_command
                           A   123    
                           A   124    .CLASS 2
                           A   125    
                           A   126    .TYPE 65
                           A   127    
                           A   128    .ENDEF
                           A   129    
                           A   130    .BEGFUNC "SD_command",26,"_SD_command"
                           A   131    
                           A   132    .LINE 26
                           A   133    
                           A   134    .DEFINE "cmd"
                           A   135    
                           A   136    .CLASS 65
                           A   137    
                           A   138    .VALUE 6
                           A   139    
                           A   140    .TYPE 12
                           A   141    
                           A   142    .ENDEF
                           A   143    
                           A   144    .DEFINE "arg"
                           A   145    
                           A   146    .CLASS 65
                           A   147    
                           A   148    .VALUE 9
                           A   149    
                           A   150    .TYPE 15
                           A   151    
                           A   152    .ENDEF
                           A   153    
                           A   154    .DEFINE "crc"
                           A   155    
                           A   156    .CLASS 65
                           A   157    
                           A   158    .VALUE 15
                           A   159    
                           A   160    .TYPE 12
                           A   161    
                           A   162    .ENDEF
                           A   163    
0402A9 DDE5                A   164    	PUSH	IX
0402AB DD210000 00         A   165    	LD	IX,0
0402B0 DD39                A   166    	ADD	IX,SP
                           A   167    ;   27	    spi_transfer(cmd|0x40);
                           A   168    .LINE 27
                           A   169    
0402B2 DD7E06              A   170    	LD	A,(IX+%6)
0402B5 CBF7                A   171    	SET	%6,A
0402B7 4F                  A   172    	LD	C,A
0402B8 0600                A   173    	LD	B,%0
0402BA C5                  A   174    	PUSH	BC
0402BB CD 2C 3E 04         A   175    	CALL	_spi_transfer
0402BF C1                  A   176    	POP	BC
                           A   177    ;   28	    spi_transfer((BYTE)(arg >> 24));
                           A   178    .LINE 28
                           A   179    
0402C0 DD7E0C              A   180    	LD	A,(IX+%C)
0402C3 B7ED62              A   181    	UEXT	HL
0402C6 6F                  A   182    	LD	L,A
0402C7 E5C1                A   183    	LD	BC,HL
0402C9 0600                A   184    	LD	B,%0
0402CB C5                  A   185    	PUSH	BC
0402CC CD 2C 3E 04         A   186    	CALL	_spi_transfer
0402D0 C1                  A   187    	POP	BC
                           A   188    ;   29	    spi_transfer((BYTE)(arg >> 16));
                           A   189    .LINE 29
                           A   190    
0402D1 DD0709              A   191    	LD	BC,(IX+%9)
0402D4 DD7E0C              A   192    	LD	A,(IX+%C)
0402D7 2E10                A   193    	LD	L,%10
0402D9 CD 68 44 04         A   194    	CALL	__lshru
0402DD 0600                A   195    	LD	B,%0
0402DF C5                  A   196    	PUSH	BC
0402E0 CD 2C 3E 04         A   197    	CALL	_spi_transfer
0402E4 C1                  A   198    	POP	BC
                           A   199    ;   30	    spi_transfer((BYTE)(arg >> 8));
                           A   200    .LINE 30
                           A   201    
0402E5 DD0709              A   202    	LD	BC,(IX+%9)
0402E8 DD7E0C              A   203    	LD	A,(IX+%C)
0402EB 2E08                A   204    	LD	L,%8
0402ED CD 68 44 04         A   205    	CALL	__lshru
0402F1 0600                A   206    	LD	B,%0
0402F3 C5                  A   207    	PUSH	BC
0402F4 CD 2C 3E 04         A   208    	CALL	_spi_transfer
0402F8 C1                  A   209    	POP	BC
                           A   210    ;   31	    spi_transfer((BYTE)(arg));
                           A   211    .LINE 31
                           A   212    
0402F9 DD4E09              A   213    	LD	C,(IX+%9)
0402FC 0600                A   214    	LD	B,%0
0402FE C5                  A   215    	PUSH	BC
0402FF CD 2C 3E 04         A   216    	CALL	_spi_transfer
040303 C1                  A   217    	POP	BC
                           A   218    ;   32	    spi_transfer(crc|0x01);
                           A   219    .LINE 32
                           A   220    
040304 DD7E0F              A   221    	LD	A,(IX+%F)
040307 CBC7                A   222    	SET	%0,A
040309 4F                  A   223    	LD	C,A
04030A 0600                A   224    	LD	B,%0
04030C C5                  A   225    	PUSH	BC
04030D CD 2C 3E 04         A   226    	CALL	_spi_transfer
040311 C1                  A   227    	POP	BC
                           A   228    ;   33	}
                           A   229    .LINE 33
                           A   230    
040312 DDF9                A   231    	LD	SP,IX
040314 DDE1                A   232    	POP	IX
040316 C9                  A   233    	RET	
                           A   234    
                           A   235    
                           A   236    ;**************************** _SD_command *****
                           A   237    ;Name                         Addr/Register   S
                           A   238    ;_spi_transfer                       IMPORT  --
                           A   239    ;crc                                  IX+15    
                           A   240    ;arg                                   IX+9    
                           A   241    ;cmd                                   IX+6    
                           A   242    
                           A   243    
                           A   244    ; Stack Frame Size: 18 (bytes)
                           A   245    ;       Spill Code: 0 (instruction)
                           A   246    
                           A   247    
                           A   248    .ENDFUNC "SD_command",33,"_SD_command"
                           A   249    ;   34	
                           A   250    ;   35	BYTE SD_readRes1() {
040317                     A   251    _SD_readRes1:
                           A   252    .DEFINE "_SD_readRes1"
                           A   253    
                           A   254    .VALUE _SD_readRes1
                           A   255    
                           A   256    .CLASS 2
                           A   257    
                           A   258    .TYPE 76
                           A   259    
                           A   260    .ENDEF
                           A   261    
                           A   262    .BEGFUNC "SD_readRes1",35,"_SD_readRes1"
                           A   263    
                           A   264    .LINE 35
                           A   265    
                           A   266    .DEFINE "i"
                           A   267    
                           A   268    .CLASS 65
                           A   269    
                           A   270    .VALUE -1
                           A   271    
                           A   272    .TYPE 12
                           A   273    
                           A   274    .ENDEF
                           A   275    
                           A   276    .DEFINE "res1"
                           A   277    
                           A   278    .CLASS 65
                           A   279    
                           A   280    .VALUE -2
                           A   281    
                           A   282    .TYPE 12
                           A   283    
                           A   284    .ENDEF
                           A   285    
040317 DDE5                A   286    	PUSH	IX
040319 DD210000 00         A   287    	LD	IX,0
04031E DD39                A   288    	ADD	IX,SP
040320 3B                  A   289    	DEC	SP
040321 3B                  A   290    	DEC	SP
                           A   291    ;   36	    BYTE i = 0, res1;
                           A   292    .LINE 36
                           A   293    
040322 DD36FF00            A   294    	LD	(IX+%FFFFFFFF),%0
                           A   295    ;   37	
                           A   296    ;   38	    // keep polling until actual data r
                           A   297    ;   39	    while((res1 = spi_transfer(0xFF)) =
                           A   298    .LINE 39
                           A   299    
040326 18 0A               A   300    	JR	L_3
040328                     A   301    L_4:
                           A   302    ;   40	        i++;
                           A   303    .LINE 40
                           A   304    
040328 DD34FF              A   305    	INC	(IX+%FFFFFFFF)
                           A   306    ;   41	        // if no data received for 8 by
                           A   307    ;   42	        if(i > 8) break;
                           A   308    .LINE 42
                           A   309    
04032B 3E08                A   310    	LD	A,%8
04032D DDBEFF              A   311    	CP	A,(IX+%FFFFFFFF)
040330 38 11               A   312    	JR	C,L_5
                           A   313    ;   43	    }
040332                     A   314    L_3:
                           A   315    .LINE 43
                           A   316    
040332 01FF0000            A   317    	LD	BC,255
040336 C5                  A   318    	PUSH	BC
040337 CD 2C 3E 04         A   319    	CALL	_spi_transfer
04033B C1                  A   320    	POP	BC
04033C DD77FE              A   321    	LD	(IX+%FFFFFFFE),A
04033F FEFF                A   322    	CP	A,%FF
040341 28 E5               A   323    	JR	Z,L_4
040343                     A   324    L_5:
                           A   325    ;   44	    return res1;
                           A   326    .LINE 44
                           A   327    
040343 DD7EFE              A   328    	LD	A,(IX+%FFFFFFFE)
                           A   329    ;   45	}
                           A   330    .LINE 45
                           A   331    
040346 DDF9                A   332    	LD	SP,IX
040348 DDE1                A   333    	POP	IX
04034A C9                  A   334    	RET	
                           A   335    
                           A   336    
                           A   337    ;**************************** _SD_readRes1 ****
                           A   338    ;Name                         Addr/Register   S
                           A   339    ;_spi_transfer                       IMPORT  --
                           A   340    ;res1                                  IX-2    
                           A   341    ;i                                     IX-1    
                           A   342    
                           A   343    
                           A   344    ; Stack Frame Size: 8 (bytes)
                           A   345    ;       Spill Code: 0 (instruction)
                           A   346    
                           A   347    
                           A   348    .ENDFUNC "SD_readRes1",45,"_SD_readRes1"
                           A   349    ;   46	
                           A   350    ;   47	void SD_readRes7(BYTE *res) {
04034B                     A   351    _SD_readRes7:
                           A   352    .DEFINE "_SD_readRes7"
                           A   353    
                           A   354    .VALUE _SD_readRes7
                           A   355    
                           A   356    .CLASS 2
                           A   357    
                           A   358    .TYPE 65
                           A   359    
                           A   360    .ENDEF
                           A   361    
                           A   362    .BEGFUNC "SD_readRes7",47,"_SD_readRes7"
                           A   363    
                           A   364    .LINE 47
                           A   365    
                           A   366    .DEFINE "res"
                           A   367    
                           A   368    .CLASS 65
                           A   369    
                           A   370    .VALUE 6
                           A   371    
                           A   372    .TYPE 44
                           A   373    
                           A   374    .ENDEF
                           A   375    
04034B DDE5                A   376    	PUSH	IX
04034D DD210000 00         A   377    	LD	IX,0
040352 DD39                A   378    	ADD	IX,SP
                           A   379    ;   48	    res[0] = SD_readRes1();
                           A   380    .LINE 48
                           A   381    
040354 CD 17 03 04         A   382    	CALL	_SD_readRes1
040358 DD2706              A   383    	LD	HL,(IX+%6)
04035B 77                  A   384    	LD	(HL),A
                           A   385    ;   49	
                           A   386    ;   50	    // if error reading R1, return
                           A   387    ;   51	    if(res[0] > 1) return;
                           A   388    .LINE 51
                           A   389    
04035C DD2706              A   390    	LD	HL,(IX+%6)
04035F 7E                  A   391    	LD	A,(HL)
040360 B7ED62              A   392    	UEXT	HL
040363 6F                  A   393    	LD	L,A
040364 E5C1                A   394    	LD	BC,HL
040366 21010000            A   395    	LD	HL,1
04036A B7                  A   396    	OR	A,A
04036B ED42                A   397    	SBC	HL,BC
04036D CD 7D 42 04         A   398    	CALL	__setflag
040371 FA B7 03 04         A   399    	JP	M,L_9
                           A   400    ;   52	
                           A   401    ;   53	    // read remaining bytes
                           A   402    ;   54	    res[1] = spi_transfer(0xFF);
                           A   403    .LINE 54
                           A   404    
040375 01FF0000            A   405    	LD	BC,255
040379 C5                  A   406    	PUSH	BC
04037A CD 2C 3E 04         A   407    	CALL	_spi_transfer
04037E C1                  A   408    	POP	BC
04037F DD2706              A   409    	LD	HL,(IX+%6)
040382 23                  A   410    	INC	HL
040383 77                  A   411    	LD	(HL),A
                           A   412    ;   55	    res[2] = spi_transfer(0xFF);
                           A   413    .LINE 55
                           A   414    
040384 01FF0000            A   415    	LD	BC,255
040388 C5                  A   416    	PUSH	BC
040389 CD 2C 3E 04         A   417    	CALL	_spi_transfer
04038D C1                  A   418    	POP	BC
04038E DD3106              A   419    	LD	IY,(IX+%6)
040391 ED2302              A   420    	LEA	HL,IY+%2
040394 77                  A   421    	LD	(HL),A
                           A   422    ;   56	    res[3] = spi_transfer(0xFF);
                           A   423    .LINE 56
                           A   424    
040395 01FF0000            A   425    	LD	BC,255
040399 C5                  A   426    	PUSH	BC
04039A CD 2C 3E 04         A   427    	CALL	_spi_transfer
04039E C1                  A   428    	POP	BC
04039F DD3106              A   429    	LD	IY,(IX+%6)
0403A2 ED2303              A   430    	LEA	HL,IY+%3
0403A5 77                  A   431    	LD	(HL),A
                           A   432    ;   57	    res[4] = spi_transfer(0xFF);
                           A   433    .LINE 57
                           A   434    
0403A6 01FF0000            A   435    	LD	BC,255
0403AA C5                  A   436    	PUSH	BC
0403AB CD 2C 3E 04         A   437    	CALL	_spi_transfer
0403AF C1                  A   438    	POP	BC
0403B0 DD3106              A   439    	LD	IY,(IX+%6)
0403B3 ED2304              A   440    	LEA	HL,IY+%4
0403B6 77                  A   441    	LD	(HL),A
                           A   442    ;   58	}
0403B7                     A   443    L_9:
                           A   444    .LINE 58
                           A   445    
0403B7 DDF9                A   446    	LD	SP,IX
0403B9 DDE1                A   447    	POP	IX
0403BB C9                  A   448    	RET	
                           A   449    
                           A   450    
                           A   451    ;**************************** _SD_readRes7 ****
                           A   452    ;Name                         Addr/Register   S
                           A   453    ;_spi_transfer                       IMPORT  --
                           A   454    ;_SD_readRes1                        IMPORT  --
                           A   455    ;res                                   IX+6    
                           A   456    
                           A   457    
                           A   458    ; Stack Frame Size: 9 (bytes)
                           A   459    ;       Spill Code: 0 (instruction)
                           A   460    
                           A   461    
                           A   462    .ENDFUNC "SD_readRes7",58,"_SD_readRes7"
                           A   463    ;   59	
                           A   464    ;   60	BYTE SD_goIdleState() {
0403BC                     A   465    _SD_goIdleState:
                           A   466    .DEFINE "_SD_goIdleState"
                           A   467    
                           A   468    .VALUE _SD_goIdleState
                           A   469    
                           A   470    .CLASS 2
                           A   471    
                           A   472    .TYPE 76
                           A   473    
                           A   474    .ENDEF
                           A   475    
                           A   476    .BEGFUNC "SD_goIdleState",60,"_SD_goIdleState"
                           A   477    
                           A   478    .LINE 60
                           A   479    
                           A   480    .DEFINE "res1"
                           A   481    
                           A   482    .CLASS 65
                           A   483    
                           A   484    .VALUE -1
                           A   485    
                           A   486    .TYPE 12
                           A   487    
                           A   488    .ENDEF
                           A   489    
0403BC DDE5                A   490    	PUSH	IX
0403BE DD210000 00         A   491    	LD	IX,0
0403C3 DD39                A   492    	ADD	IX,SP
0403C5 3B                  A   493    	DEC	SP
                           A   494    ;   61		BYTE res1;
                           A   495    ;   62	//  printf("SD_goIdleState()\n");
                           A   496    ;   63	    spi_transfer(0xFF);
                           A   497    .LINE 63
                           A   498    
0403C6 01FF0000            A   499    	LD	BC,255
0403CA C5                  A   500    	PUSH	BC
0403CB CD 2C 3E 04         A   501    	CALL	_spi_transfer
0403CF C1                  A   502    	POP	BC
                           A   503    ;   64	    SD_CS_enable();
                           A   504    .LINE 64
                           A   505    
0403D0 CD 00 3E 04         A   506    	CALL	_SD_CS_enable
                           A   507    ;   65	    spi_transfer(0xFF);
                           A   508    .LINE 65
                           A   509    
0403D4 01FF0000            A   510    	LD	BC,255
0403D8 C5                  A   511    	PUSH	BC
0403D9 CD 2C 3E 04         A   512    	CALL	_spi_transfer
0403DD C1                  A   513    	POP	BC
                           A   514    ;   66	    SD_command(CMD0, CMD0_ARG, CMD0_CRC
                           A   515    .LINE 66
                           A   516    
0403DE 01940000            A   517    	LD	BC,148
0403E2 C5                  A   518    	PUSH	BC
0403E3 01000000            A   519    	LD	BC,0
0403E7 C5                  A   520    	PUSH	BC
0403E8 C5                  A   521    	PUSH	BC
0403E9 C5                  A   522    	PUSH	BC
0403EA CD A9 02 04         A   523    	CALL	_SD_command
0403EE C1                  A   524    	POP	BC
0403EF C1                  A   525    	POP	BC
0403F0 C1                  A   526    	POP	BC
0403F1 C1                  A   527    	POP	BC
                           A   528    ;   67	    res1 = SD_readRes1();
                           A   529    .LINE 67
                           A   530    
0403F2 CD 17 03 04         A   531    	CALL	_SD_readRes1
0403F6 DD77FF              A   532    	LD	(IX+%FFFFFFFF),A
                           A   533    ;   68	    spi_transfer(0xFF);
                           A   534    .LINE 68
                           A   535    
0403F9 01FF0000            A   536    	LD	BC,255
0403FD C5                  A   537    	PUSH	BC
0403FE CD 2C 3E 04         A   538    	CALL	_spi_transfer
040402 C1                  A   539    	POP	BC
                           A   540    ;   69	    SD_CS_disable();
                           A   541    .LINE 69
                           A   542    
040403 CD 16 3E 04         A   543    	CALL	_SD_CS_disable
                           A   544    ;   70	    spi_transfer(0xFF);
                           A   545    .LINE 70
                           A   546    
040407 01FF0000            A   547    	LD	BC,255
04040B C5                  A   548    	PUSH	BC
04040C CD 2C 3E 04         A   549    	CALL	_spi_transfer
040410 C1                  A   550    	POP	BC
                           A   551    ;   71	    return res1;
                           A   552    .LINE 71
                           A   553    
040411 DD7EFF              A   554    	LD	A,(IX+%FFFFFFFF)
                           A   555    ;   72	}
                           A   556    .LINE 72
                           A   557    
040414 DDF9                A   558    	LD	SP,IX
040416 DDE1                A   559    	POP	IX
040418 C9                  A   560    	RET	
                           A   561    
                           A   562    
                           A   563    ;**************************** _SD_goIdleState *
                           A   564    ;Name                         Addr/Register   S
                           A   565    ;_SD_CS_disable                      IMPORT  --
                           A   566    ;_SD_readRes1                        IMPORT  --
                           A   567    ;_SD_command                         IMPORT  --
                           A   568    ;_SD_CS_enable                       IMPORT  --
                           A   569    ;_spi_transfer                       IMPORT  --
                           A   570    ;res1                                  IX-1    
                           A   571    
                           A   572    
                           A   573    ; Stack Frame Size: 7 (bytes)
                           A   574    ;       Spill Code: 0 (instruction)
                           A   575    
                           A   576    
                           A   577    .ENDFUNC "SD_goIdleState",72,"_SD_goIdleState"
                           A   578    ;   73	
                           A   579    ;   74	void SD_sendIfCond(BYTE *res) {
040419                     A   580    _SD_sendIfCond:
                           A   581    .DEFINE "_SD_sendIfCond"
                           A   582    
                           A   583    .VALUE _SD_sendIfCond
                           A   584    
                           A   585    .CLASS 2
                           A   586    
                           A   587    .TYPE 65
                           A   588    
                           A   589    .ENDEF
                           A   590    
                           A   591    .BEGFUNC "SD_sendIfCond",74,"_SD_sendIfCond"
                           A   592    
                           A   593    .LINE 74
                           A   594    
                           A   595    .DEFINE "res"
                           A   596    
                           A   597    .CLASS 65
                           A   598    
                           A   599    .VALUE 6
                           A   600    
                           A   601    .TYPE 44
                           A   602    
                           A   603    .ENDEF
                           A   604    
040419 DDE5                A   605    	PUSH	IX
04041B DD210000 00         A   606    	LD	IX,0
040420 DD39                A   607    	ADD	IX,SP
                           A   608    ;   75	//  printf("SD_sendIfCond()\n");
                           A   609    ;   76	    spi_transfer(0xFF);
                           A   610    .LINE 76
                           A   611    
040422 01FF0000            A   612    	LD	BC,255
040426 C5                  A   613    	PUSH	BC
040427 CD 2C 3E 04         A   614    	CALL	_spi_transfer
04042B C1                  A   615    	POP	BC
                           A   616    ;   77	    SD_CS_enable();
                           A   617    .LINE 77
                           A   618    
04042C CD 00 3E 04         A   619    	CALL	_SD_CS_enable
                           A   620    ;   78	    spi_transfer(0xFF);
                           A   621    .LINE 78
                           A   622    
040430 01FF0000            A   623    	LD	BC,255
040434 C5                  A   624    	PUSH	BC
040435 CD 2C 3E 04         A   625    	CALL	_spi_transfer
040439 C1                  A   626    	POP	BC
                           A   627    ;   79	    SD_command(CMD8, CMD8_ARG, CMD8_CRC
                           A   628    .LINE 79
                           A   629    
04043A 01860000            A   630    	LD	BC,134
04043E C5                  A   631    	PUSH	BC
04043F 01000000            A   632    	LD	BC,0
040443 C5                  A   633    	PUSH	BC
040444 01AA0100            A   634    	LD	BC,426
040448 C5                  A   635    	PUSH	BC
040449 01080000            A   636    	LD	BC,8
04044D C5                  A   637    	PUSH	BC
04044E CD A9 02 04         A   638    	CALL	_SD_command
040452 C1                  A   639    	POP	BC
040453 C1                  A   640    	POP	BC
040454 C1                  A   641    	POP	BC
040455 C1                  A   642    	POP	BC
                           A   643    ;   80	    SD_readRes7(res);
                           A   644    .LINE 80
                           A   645    
040456 DD0706              A   646    	LD	BC,(IX+%6)
040459 C5                  A   647    	PUSH	BC
04045A CD 4B 03 04         A   648    	CALL	_SD_readRes7
04045E C1                  A   649    	POP	BC
                           A   650    ;   81	    spi_transfer(0xFF);
                           A   651    .LINE 81
                           A   652    
04045F 01FF0000            A   653    	LD	BC,255
040463 C5                  A   654    	PUSH	BC
040464 CD 2C 3E 04         A   655    	CALL	_spi_transfer
040468 C1                  A   656    	POP	BC
                           A   657    ;   82	    SD_CS_disable();
                           A   658    .LINE 82
                           A   659    
040469 CD 16 3E 04         A   660    	CALL	_SD_CS_disable
                           A   661    ;   83	    spi_transfer(0xFF);
                           A   662    .LINE 83
                           A   663    
04046D 01FF0000            A   664    	LD	BC,255
040471 C5                  A   665    	PUSH	BC
040472 CD 2C 3E 04         A   666    	CALL	_spi_transfer
040476 C1                  A   667    	POP	BC
                           A   668    ;   84	}
                           A   669    .LINE 84
                           A   670    
040477 DDF9                A   671    	LD	SP,IX
040479 DDE1                A   672    	POP	IX
04047B C9                  A   673    	RET	
                           A   674    
                           A   675    
                           A   676    ;**************************** _SD_sendIfCond **
                           A   677    ;Name                         Addr/Register   S
                           A   678    ;_SD_CS_disable                      IMPORT  --
                           A   679    ;_SD_readRes7                        IMPORT  --
                           A   680    ;_SD_command                         IMPORT  --
                           A   681    ;_SD_CS_enable                       IMPORT  --
                           A   682    ;_spi_transfer                       IMPORT  --
                           A   683    ;res                                   IX+6    
                           A   684    
                           A   685    
                           A   686    ; Stack Frame Size: 9 (bytes)
                           A   687    ;       Spill Code: 0 (instruction)
                           A   688    
                           A   689    
                           A   690    .ENDFUNC "SD_sendIfCond",84,"_SD_sendIfCond"
                           A   691    ;   85	
                           A   692    ;   86	UINT8 SD_sendApp() {
04047C                     A   693    _SD_sendApp:
                           A   694    .DEFINE "_SD_sendApp"
                           A   695    
                           A   696    .VALUE _SD_sendApp
                           A   697    
                           A   698    .CLASS 2
                           A   699    
                           A   700    .TYPE 76
                           A   701    
                           A   702    .ENDEF
                           A   703    
                           A   704    .BEGFUNC "SD_sendApp",86,"_SD_sendApp"
                           A   705    
                           A   706    .LINE 86
                           A   707    
                           A   708    .DEFINE "res1"
                           A   709    
                           A   710    .CLASS 65
                           A   711    
                           A   712    .VALUE -1
                           A   713    
                           A   714    .TYPE 12
                           A   715    
                           A   716    .ENDEF
                           A   717    
04047C DDE5                A   718    	PUSH	IX
04047E DD210000 00         A   719    	LD	IX,0
040483 DD39                A   720    	ADD	IX,SP
040485 3B                  A   721    	DEC	SP
                           A   722    ;   87		BYTE res1;
                           A   723    ;   88	//	printf("SD_sendApp()\n");
                           A   724    ;   89	    spi_transfer(0xFF);
                           A   725    .LINE 89
                           A   726    
040486 01FF0000            A   727    	LD	BC,255
04048A C5                  A   728    	PUSH	BC
04048B CD 2C 3E 04         A   729    	CALL	_spi_transfer
04048F C1                  A   730    	POP	BC
                           A   731    ;   90	    SD_CS_enable();
                           A   732    .LINE 90
                           A   733    
040490 CD 00 3E 04         A   734    	CALL	_SD_CS_enable
                           A   735    ;   91	    spi_transfer(0xFF);
                           A   736    .LINE 91
                           A   737    
040494 01FF0000            A   738    	LD	BC,255
040498 C5                  A   739    	PUSH	BC
040499 CD 2C 3E 04         A   740    	CALL	_spi_transfer
04049D C1                  A   741    	POP	BC
                           A   742    ;   92	    SD_command(CMD55, CMD55_ARG, CMD55_
                           A   743    .LINE 92
                           A   744    
04049E 01000000            A   745    	LD	BC,0
0404A2 C5                  A   746    	PUSH	BC
0404A3 C5                  A   747    	PUSH	BC
0404A4 C5                  A   748    	PUSH	BC
0404A5 01370000            A   749    	LD	BC,55
0404A9 C5                  A   750    	PUSH	BC
0404AA CD A9 02 04         A   751    	CALL	_SD_command
0404AE C1                  A   752    	POP	BC
0404AF C1                  A   753    	POP	BC
0404B0 C1                  A   754    	POP	BC
0404B1 C1                  A   755    	POP	BC
                           A   756    ;   93	    res1 = SD_readRes1();
                           A   757    .LINE 93
                           A   758    
0404B2 CD 17 03 04         A   759    	CALL	_SD_readRes1
0404B6 DD77FF              A   760    	LD	(IX+%FFFFFFFF),A
                           A   761    ;   94	    spi_transfer(0xFF);
                           A   762    .LINE 94
                           A   763    
0404B9 01FF0000            A   764    	LD	BC,255
0404BD C5                  A   765    	PUSH	BC
0404BE CD 2C 3E 04         A   766    	CALL	_spi_transfer
0404C2 C1                  A   767    	POP	BC
                           A   768    ;   95	    SD_CS_disable();
                           A   769    .LINE 95
                           A   770    
0404C3 CD 16 3E 04         A   771    	CALL	_SD_CS_disable
                           A   772    ;   96	    spi_transfer(0xFF);
                           A   773    .LINE 96
                           A   774    
0404C7 01FF0000            A   775    	LD	BC,255
0404CB C5                  A   776    	PUSH	BC
0404CC CD 2C 3E 04         A   777    	CALL	_spi_transfer
0404D0 C1                  A   778    	POP	BC
                           A   779    ;   97	    return res1;
                           A   780    .LINE 97
                           A   781    
0404D1 DD7EFF              A   782    	LD	A,(IX+%FFFFFFFF)
                           A   783    ;   98	}
                           A   784    .LINE 98
                           A   785    
0404D4 DDF9                A   786    	LD	SP,IX
0404D6 DDE1                A   787    	POP	IX
0404D8 C9                  A   788    	RET	
                           A   789    
                           A   790    
                           A   791    ;**************************** _SD_sendApp *****
                           A   792    ;Name                         Addr/Register   S
                           A   793    ;_SD_CS_disable                      IMPORT  --
                           A   794    ;_SD_readRes1                        IMPORT  --
                           A   795    ;_SD_command                         IMPORT  --
                           A   796    ;_SD_CS_enable                       IMPORT  --
                           A   797    ;_spi_transfer                       IMPORT  --
                           A   798    ;res1                                  IX-1    
                           A   799    
                           A   800    
                           A   801    ; Stack Frame Size: 7 (bytes)
                           A   802    ;       Spill Code: 0 (instruction)
                           A   803    
                           A   804    
                           A   805    .ENDFUNC "SD_sendApp",98,"_SD_sendApp"
                           A   806    ;   99	
                           A   807    ;  100	UINT8 SD_sendOpCond() {
0404D9                     A   808    _SD_sendOpCond:
                           A   809    .DEFINE "_SD_sendOpCond"
                           A   810    
                           A   811    .VALUE _SD_sendOpCond
                           A   812    
                           A   813    .CLASS 2
                           A   814    
                           A   815    .TYPE 76
                           A   816    
                           A   817    .ENDEF
                           A   818    
                           A   819    .BEGFUNC "SD_sendOpCond",100,"_SD_sendOpCond"
                           A   820    
                           A   821    .LINE 100
                           A   822    
                           A   823    .DEFINE "res1"
                           A   824    
                           A   825    .CLASS 65
                           A   826    
                           A   827    .VALUE -1
                           A   828    
                           A   829    .TYPE 12
                           A   830    
                           A   831    .ENDEF
                           A   832    
0404D9 DDE5                A   833    	PUSH	IX
0404DB DD210000 00         A   834    	LD	IX,0
0404E0 DD39                A   835    	ADD	IX,SP
0404E2 3B                  A   836    	DEC	SP
                           A   837    ;  101		BYTE res1;
                           A   838    ;  102	//  printf("SD_sendOpCond()\n");
                           A   839    ;  103	    spi_transfer(0xFF);
                           A   840    .LINE 103
                           A   841    
0404E3 01FF0000            A   842    	LD	BC,255
0404E7 C5                  A   843    	PUSH	BC
0404E8 CD 2C 3E 04         A   844    	CALL	_spi_transfer
0404EC C1                  A   845    	POP	BC
                           A   846    ;  104	    SD_CS_enable();
                           A   847    .LINE 104
                           A   848    
0404ED CD 00 3E 04         A   849    	CALL	_SD_CS_enable
                           A   850    ;  105	    spi_transfer(0xFF);
                           A   851    .LINE 105
                           A   852    
0404F1 01FF0000            A   853    	LD	BC,255
0404F5 C5                  A   854    	PUSH	BC
0404F6 CD 2C 3E 04         A   855    	CALL	_spi_transfer
0404FA C1                  A   856    	POP	BC
                           A   857    ;  106	    SD_command(ACMD41, ACMD41_ARG, ACMD
                           A   858    .LINE 106
                           A   859    
0404FB 01000000            A   860    	LD	BC,0
0404FF C5                  A   861    	PUSH	BC
040500 01400000            A   862    	LD	BC,64
040504 C5                  A   863    	PUSH	BC
040505 01000000            A   864    	LD	BC,0
040509 C5                  A   865    	PUSH	BC
04050A 01290000            A   866    	LD	BC,41
04050E C5                  A   867    	PUSH	BC
04050F CD A9 02 04         A   868    	CALL	_SD_command
040513 C1                  A   869    	POP	BC
040514 C1                  A   870    	POP	BC
040515 C1                  A   871    	POP	BC
040516 C1                  A   872    	POP	BC
                           A   873    ;  107	    res1 = SD_readRes1();
                           A   874    .LINE 107
                           A   875    
040517 CD 17 03 04         A   876    	CALL	_SD_readRes1
04051B DD77FF              A   877    	LD	(IX+%FFFFFFFF),A
                           A   878    ;  108	    spi_transfer(0xFF);
                           A   879    .LINE 108
                           A   880    
04051E 01FF0000            A   881    	LD	BC,255
040522 C5                  A   882    	PUSH	BC
040523 CD 2C 3E 04         A   883    	CALL	_spi_transfer
040527 C1                  A   884    	POP	BC
                           A   885    ;  109	    SD_CS_disable();
                           A   886    .LINE 109
                           A   887    
040528 CD 16 3E 04         A   888    	CALL	_SD_CS_disable
                           A   889    ;  110	    spi_transfer(0xFF);
                           A   890    .LINE 110
                           A   891    
04052C 01FF0000            A   892    	LD	BC,255
040530 C5                  A   893    	PUSH	BC
040531 CD 2C 3E 04         A   894    	CALL	_spi_transfer
040535 C1                  A   895    	POP	BC
                           A   896    ;  111	    return res1;
                           A   897    .LINE 111
                           A   898    
040536 DD7EFF              A   899    	LD	A,(IX+%FFFFFFFF)
                           A   900    ;  112	}
                           A   901    .LINE 112
                           A   902    
040539 DDF9                A   903    	LD	SP,IX
04053B DDE1                A   904    	POP	IX
04053D C9                  A   905    	RET	
                           A   906    
                           A   907    
                           A   908    ;**************************** _SD_sendOpCond **
                           A   909    ;Name                         Addr/Register   S
                           A   910    ;_SD_CS_disable                      IMPORT  --
                           A   911    ;_SD_readRes1                        IMPORT  --
                           A   912    ;_SD_command                         IMPORT  --
                           A   913    ;_SD_CS_enable                       IMPORT  --
                           A   914    ;_spi_transfer                       IMPORT  --
                           A   915    ;res1                                  IX-1    
                           A   916    
                           A   917    
                           A   918    ; Stack Frame Size: 7 (bytes)
                           A   919    ;       Spill Code: 0 (instruction)
                           A   920    
                           A   921    
                           A   922    .ENDFUNC "SD_sendOpCond",112,"_SD_sendOpCond"
                           A   923    ;  113	
                           A   924    ;  114	void SD_readOCR(BYTE *res) {
04053E                     A   925    _SD_readOCR:
                           A   926    .DEFINE "_SD_readOCR"
                           A   927    
                           A   928    .VALUE _SD_readOCR
                           A   929    
                           A   930    .CLASS 2
                           A   931    
                           A   932    .TYPE 65
                           A   933    
                           A   934    .ENDEF
                           A   935    
                           A   936    .BEGFUNC "SD_readOCR",114,"_SD_readOCR"
                           A   937    
                           A   938    .LINE 114
                           A   939    
                           A   940    .DEFINE "res"
                           A   941    
                           A   942    .CLASS 65
                           A   943    
                           A   944    .VALUE 6
                           A   945    
                           A   946    .TYPE 44
                           A   947    
                           A   948    .ENDEF
                           A   949    
04053E DDE5                A   950    	PUSH	IX
040540 DD210000 00         A   951    	LD	IX,0
040545 DD39                A   952    	ADD	IX,SP
                           A   953    ;  115	//  printf("SD_readOCR()\n");
                           A   954    ;  116	    spi_transfer(0xFF);
                           A   955    .LINE 116
                           A   956    
040547 01FF0000            A   957    	LD	BC,255
04054B C5                  A   958    	PUSH	BC
04054C CD 2C 3E 04         A   959    	CALL	_spi_transfer
040550 C1                  A   960    	POP	BC
                           A   961    ;  117	    SD_CS_enable();
                           A   962    .LINE 117
                           A   963    
040551 CD 00 3E 04         A   964    	CALL	_SD_CS_enable
                           A   965    ;  118	    spi_transfer(0xFF);
                           A   966    .LINE 118
                           A   967    
040555 01FF0000            A   968    	LD	BC,255
040559 C5                  A   969    	PUSH	BC
04055A CD 2C 3E 04         A   970    	CALL	_spi_transfer
04055E C1                  A   971    	POP	BC
                           A   972    ;  119	    SD_command(CMD58, CMD58_ARG, CMD58_
                           A   973    .LINE 119
                           A   974    
04055F 01000000            A   975    	LD	BC,0
040563 C5                  A   976    	PUSH	BC
040564 C5                  A   977    	PUSH	BC
040565 C5                  A   978    	PUSH	BC
040566 013A0000            A   979    	LD	BC,58
04056A C5                  A   980    	PUSH	BC
04056B CD A9 02 04         A   981    	CALL	_SD_command
04056F C1                  A   982    	POP	BC
040570 C1                  A   983    	POP	BC
040571 C1                  A   984    	POP	BC
040572 C1                  A   985    	POP	BC
                           A   986    ;  120	    SD_readRes7(res);
                           A   987    .LINE 120
                           A   988    
040573 DD0706              A   989    	LD	BC,(IX+%6)
040576 C5                  A   990    	PUSH	BC
040577 CD 4B 03 04         A   991    	CALL	_SD_readRes7
04057B C1                  A   992    	POP	BC
                           A   993    ;  121	    spi_transfer(0xFF);
                           A   994    .LINE 121
                           A   995    
04057C 01FF0000            A   996    	LD	BC,255
040580 C5                  A   997    	PUSH	BC
040581 CD 2C 3E 04         A   998    	CALL	_spi_transfer
040585 C1                  A   999    	POP	BC
                           A  1000    ;  122	    SD_CS_disable();
                           A  1001    .LINE 122
                           A  1002    
040586 CD 16 3E 04         A  1003    	CALL	_SD_CS_disable
                           A  1004    ;  123	    spi_transfer(0xFF);
                           A  1005    .LINE 123
                           A  1006    
04058A 01FF0000            A  1007    	LD	BC,255
04058E C5                  A  1008    	PUSH	BC
04058F CD 2C 3E 04         A  1009    	CALL	_spi_transfer
040593 C1                  A  1010    	POP	BC
                           A  1011    ;  124	}
                           A  1012    .LINE 124
                           A  1013    
040594 DDF9                A  1014    	LD	SP,IX
040596 DDE1                A  1015    	POP	IX
040598 C9                  A  1016    	RET	
                           A  1017    
                           A  1018    
                           A  1019    ;**************************** _SD_readOCR *****
                           A  1020    ;Name                         Addr/Register   S
                           A  1021    ;_SD_CS_disable                      IMPORT  --
                           A  1022    ;_SD_readRes7                        IMPORT  --
                           A  1023    ;_SD_command                         IMPORT  --
                           A  1024    ;_SD_CS_enable                       IMPORT  --
                           A  1025    ;_spi_transfer                       IMPORT  --
                           A  1026    ;res                                   IX+6    
                           A  1027    
                           A  1028    
                           A  1029    ; Stack Frame Size: 9 (bytes)
                           A  1030    ;       Spill Code: 0 (instruction)
                           A  1031    
                           A  1032    
                           A  1033    .ENDFUNC "SD_readOCR",124,"_SD_readOCR"
                           A  1034    ;  125	
                           A  1035    ;  126	void SD_powerUpSeq() {
040599                     A  1036    _SD_powerUpSeq:
                           A  1037    .DEFINE "_SD_powerUpSeq"
                           A  1038    
                           A  1039    .VALUE _SD_powerUpSeq
                           A  1040    
                           A  1041    .CLASS 2
                           A  1042    
                           A  1043    .TYPE 65
                           A  1044    
                           A  1045    .ENDEF
                           A  1046    
                           A  1047    .BEGFUNC "SD_powerUpSeq",126,"_SD_powerUpSeq"
                           A  1048    
                           A  1049    .LINE 126
                           A  1050    
                           A  1051    .DEFINE "i"
                           A  1052    
                           A  1053    .CLASS 65
                           A  1054    
                           A  1055    .VALUE -3
                           A  1056    
                           A  1057    .TYPE 4
                           A  1058    
                           A  1059    .ENDEF
                           A  1060    
040599 DDE5                A  1061    	PUSH	IX
04059B DD210000 00         A  1062    	LD	IX,0
0405A0 DD39                A  1063    	ADD	IX,SP
0405A2 C5                  A  1064    	PUSH	BC
                           A  1065    ;  127		int i;
                           A  1066    ;  128	//  printf("SD_powerUpSeq()\n");
                           A  1067    ;  129	    SD_CS_disable();
                           A  1068    .LINE 129
                           A  1069    
0405A3 CD 16 3E 04         A  1070    	CALL	_SD_CS_disable
                           A  1071    ;  130		wait_timer0();
                           A  1072    .LINE 130
                           A  1073    
0405A7 CD E3 00 04         A  1074    	CALL	_wait_timer0
                           A  1075    ;  131		spi_transfer(0xFF);
                           A  1076    .LINE 131
                           A  1077    
0405AB 01FF0000            A  1078    	LD	BC,255
0405AF C5                  A  1079    	PUSH	BC
0405B0 CD 2C 3E 04         A  1080    	CALL	_spi_transfer
0405B4 C1                  A  1081    	POP	BC
                           A  1082    ;  132	    SD_CS_disable();
                           A  1083    .LINE 132
                           A  1084    
0405B5 CD 16 3E 04         A  1085    	CALL	_SD_CS_disable
                           A  1086    ;  133		for(i = 0; i < SD_INIT_CYCLES; i++)
                           A  1087    .LINE 133
                           A  1088    
0405B9 01000000            A  1089    	LD	BC,0
0405BD DD0FFD              A  1090    	LD	(IX+%FFFFFFFD),BC
0405C0 18 11               A  1091    	JR	L_18
0405C2                     A  1092    L_16:
                           A  1093    ;  134	        spi_transfer(0xFF);
                           A  1094    .LINE 134
                           A  1095    
0405C2 01FF0000            A  1096    	LD	BC,255
0405C6 C5                  A  1097    	PUSH	BC
0405C7 CD 2C 3E 04         A  1098    	CALL	_spi_transfer
0405CB C1                  A  1099    	POP	BC
0405CC DD07FD              A  1100    	LD	BC,(IX+%FFFFFFFD)
0405CF 03                  A  1101    	INC	BC
0405D0 DD0FFD              A  1102    	LD	(IX+%FFFFFFFD),BC
                           A  1103    ;  135		}
0405D3                     A  1104    L_18:
                           A  1105    .LINE 135
                           A  1106    
0405D3 010A0000            A  1107    	LD	BC,10
0405D7 DD27FD              A  1108    	LD	HL,(IX+%FFFFFFFD)
0405DA B7                  A  1109    	OR	A,A
0405DB ED42                A  1110    	SBC	HL,BC
0405DD CD 7D 42 04         A  1111    	CALL	__setflag
0405E1 FA C2 05 04         A  1112    	JP	M,L_16
                           A  1113    ;  136	}
                           A  1114    .LINE 136
                           A  1115    
0405E5 DDF9                A  1116    	LD	SP,IX
0405E7 DDE1                A  1117    	POP	IX
0405E9 C9                  A  1118    	RET	
                           A  1119    
                           A  1120    
                           A  1121    ;**************************** _SD_powerUpSeq **
                           A  1122    ;Name                         Addr/Register   S
                           A  1123    ;_spi_transfer                       IMPORT  --
                           A  1124    ;_wait_timer0                        IMPORT  --
                           A  1125    ;_SD_CS_disable                      IMPORT  --
                           A  1126    ;i                                     IX-3    
                           A  1127    
                           A  1128    
                           A  1129    ; Stack Frame Size: 9 (bytes)
                           A  1130    ;       Spill Code: 0 (instruction)
                           A  1131    
                           A  1132    
                           A  1133    .ENDFUNC "SD_powerUpSeq",136,"_SD_powerUpSeq"
                           A  1134    ;  137	
                           A  1135    ;  138	BYTE SD_readBlocks(DWORD addr, BYTE *bu
0405EA                     A  1136    _SD_readBlocks:
                           A  1137    .DEFINE "_SD_readBlocks"
                           A  1138    
                           A  1139    .VALUE _SD_readBlocks
                           A  1140    
                           A  1141    .CLASS 2
                           A  1142    
                           A  1143    .TYPE 76
                           A  1144    
                           A  1145    .ENDEF
                           A  1146    
                           A  1147    .BEGFUNC "SD_readBlocks",138,"_SD_readBlocks"
                           A  1148    
                           A  1149    .LINE 138
                           A  1150    
                           A  1151    .DEFINE "addr"
                           A  1152    
                           A  1153    .CLASS 65
                           A  1154    
                           A  1155    .VALUE 6
                           A  1156    
                           A  1157    .TYPE 15
                           A  1158    
                           A  1159    .ENDEF
                           A  1160    
                           A  1161    .DEFINE "buf"
                           A  1162    
                           A  1163    .CLASS 65
                           A  1164    
                           A  1165    .VALUE 12
                           A  1166    
                           A  1167    .TYPE 44
                           A  1168    
                           A  1169    .ENDEF
                           A  1170    
                           A  1171    .DEFINE "count"
                           A  1172    
                           A  1173    .CLASS 65
                           A  1174    
                           A  1175    .VALUE 15
                           A  1176    
                           A  1177    .TYPE 13
                           A  1178    
                           A  1179    .ENDEF
                           A  1180    
                           A  1181    .DEFINE "i"
                           A  1182    
                           A  1183    .CLASS 65
                           A  1184    
                           A  1185    .VALUE -3
                           A  1186    
                           A  1187    .TYPE 14
                           A  1188    
                           A  1189    .ENDEF
                           A  1190    
                           A  1191    .DEFINE "res"
                           A  1192    
                           A  1193    .CLASS 65
                           A  1194    
                           A  1195    .VALUE -4
                           A  1196    
                           A  1197    .TYPE 12
                           A  1198    
                           A  1199    .ENDEF
                           A  1200    
                           A  1201    .DEFINE "token"
                           A  1202    
                           A  1203    .CLASS 65
                           A  1204    
                           A  1205    .VALUE -5
                           A  1206    
                           A  1207    .TYPE 12
                           A  1208    
                           A  1209    .ENDEF
                           A  1210    
                           A  1211    .DEFINE "ptr"
                           A  1212    
                           A  1213    .CLASS 65
                           A  1214    
                           A  1215    .VALUE -8
                           A  1216    
                           A  1217    .TYPE 44
                           A  1218    
                           A  1219    .ENDEF
                           A  1220    
                           A  1221    .DEFINE "sector"
                           A  1222    
                           A  1223    .CLASS 65
                           A  1224    
                           A  1225    .VALUE -12
                           A  1226    
                           A  1227    .TYPE 15
                           A  1228    
                           A  1229    .ENDEF
                           A  1230    
0405EA DDE5                A  1231    	PUSH	IX
0405EC DD210000 00         A  1232    	LD	IX,0
0405F1 DD39                A  1233    	ADD	IX,SP
0405F3 ED22F4              A  1234    	LEA	HL,IX+%FFFFFFF4
0405F6 F9                  A  1235    	LD	SP,HL
                           A  1236    ;  139		DWORD	sector = addr;
                           A  1237    .LINE 139
                           A  1238    
0405F7 DD0706              A  1239    	LD	BC,(IX+%6)
0405FA DD7E09              A  1240    	LD	A,(IX+%9)
0405FD DD0FF4              A  1241    	LD	(IX+%FFFFFFF4),BC
040600 DD77F7              A  1242    	LD	(IX+%FFFFFFF7),A
                           A  1243    ;  140		BYTE	res;
                           A  1244    ;  141		BYTE	token;
                           A  1245    ;  142		BYTE *	ptr = buf;
                           A  1246    .LINE 142
                           A  1247    
040603 DD070C              A  1248    	LD	BC,(IX+%C)
040606 DD0FF8              A  1249    	LD	(IX+%FFFFFFF8),BC
                           A  1250    ;  143		UINT	i;
                           A  1251    ;  144	
                           A  1252    ;  145		for(i = 0; i < count; i++) {
                           A  1253    .LINE 145
                           A  1254    
040609 01000000            A  1255    	LD	BC,0
04060D DD0FFD              A  1256    	LD	(IX+%FFFFFFFD),BC
040610 18 51               A  1257    	JR	L_27
040612                     A  1258    L_25:
                           A  1259    ;  146			res = SD_readSingleBlock(sector
                           A  1260    .LINE 146
                           A  1261    
040612 ED65FB              A  1262    	PEA	IX+%FFFFFFFB
040615 DD07F8              A  1263    	LD	BC,(IX+%FFFFFFF8)
040618 C5                  A  1264    	PUSH	BC
040619 DD4EF7              A  1265    	LD	C,(IX+%FFFFFFF7)
04061C 0600                A  1266    	LD	B,%0
04061E C5                  A  1267    	PUSH	BC
04061F DD07F4              A  1268    	LD	BC,(IX+%FFFFFFF4)
040622 C5                  A  1269    	PUSH	BC
040623 CD 29 08 04         A  1270    	CALL	_SD_readSingleBlock
040627 C1                  A  1271    	POP	BC
040628 C1                  A  1272    	POP	BC
040629 C1                  A  1273    	POP	BC
04062A C1                  A  1274    	POP	BC
04062B DD77FC              A  1275    	LD	(IX+%FFFFFFFC),A
                           A  1276    ;  147			if(SD_R1_NO_ERROR(res) && (toke
                           A  1277    .LINE 147
                           A  1278    
04062E FE02                A  1279    	CP	A,%2
040630 30 26               A  1280    	JR	NC,L_24
040632 DD7EFB              A  1281    	LD	A,(IX+%FFFFFFFB)
040635 FEFE                A  1282    	CP	A,%FE
040637 20 1F               A  1283    	JR	NZ,L_24
                           A  1284    ;  148				sector++;
                           A  1285    .LINE 148
                           A  1286    
040639 DD27F4              A  1287    	LD	HL,(IX+%FFFFFFF4)
04063C DD5EF7              A  1288    	LD	E,(IX+%FFFFFFF7)
04063F 3E01                A  1289    	LD	A,%1
040641 CD 68 42 04         A  1290    	CALL	__ladd_b
040645 DD2FF4              A  1291    	LD	(IX+%FFFFFFF4),HL
040648 DD73F7              A  1292    	LD	(IX+%FFFFFFF7),E
                           A  1293    ;  149				ptr += SD_BLOCK_LEN;
                           A  1294    .LINE 149
                           A  1295    
04064B 01000200            A  1296    	LD	BC,512
04064F DD27F8              A  1297    	LD	HL,(IX+%FFFFFFF8)
040652 09                  A  1298    	ADD	HL,BC
040653 DD2FF8              A  1299    	LD	(IX+%FFFFFFF8),HL
                           A  1300    ;  150			}
                           A  1301    ;  151			else {
                           A  1302    .LINE 151
                           A  1303    
040656 18 04               A  1304    	JR	L_26
040658                     A  1305    L_24:
                           A  1306    ;  152				return SD_ERROR;
                           A  1307    .LINE 152
                           A  1308    
040658 3E01                A  1309    	LD	A,%1
04065A 18 19               A  1310    	JR	L_29
                           A  1311    ;  153			}
                           A  1312    ;  154		}	
04065C                     A  1313    L_26:
                           A  1314    .LINE 154
                           A  1315    
04065C DD07FD              A  1316    	LD	BC,(IX+%FFFFFFFD)
04065F 03                  A  1317    	INC	BC
040660 DD0FFD              A  1318    	LD	(IX+%FFFFFFFD),BC
040663                     A  1319    L_27:
040663 DD070F              A  1320    	LD	BC,(IX+%F)
040666 CD 54 43 04         A  1321    	CALL	__stoiu
04066A E5C1                A  1322    	LD	BC,HL
04066C DD27FD              A  1323    	LD	HL,(IX+%FFFFFFFD)
04066F B7                  A  1324    	OR	A,A
040670 ED42                A  1325    	SBC	HL,BC
040672 38 9E               A  1326    	JR	C,L_25
                           A  1327    ;  155		return SD_SUCCESS;
                           A  1328    .LINE 155
                           A  1329    
040674 AF                  A  1330    	XOR	A,A
                           A  1331    ;  156	}
040675                     A  1332    L_29:
                           A  1333    .LINE 156
                           A  1334    
040675 DDF9                A  1335    	LD	SP,IX
040677 DDE1                A  1336    	POP	IX
040679 C9                  A  1337    	RET	
                           A  1338    
                           A  1339    
                           A  1340    ;**************************** _SD_readBlocks **
                           A  1341    ;Name                         Addr/Register   S
                           A  1342    ;_SD_readSingleBlock                 IMPORT  --
                           A  1343    ;sector                               IX-12    
                           A  1344    ;ptr                                   IX-8    
                           A  1345    ;token                                 IX-5    
                           A  1346    ;res                                   IX-4    
                           A  1347    ;i                                     IX-3    
                           A  1348    ;count                                IX+15    
                           A  1349    ;buf                                  IX+12    
                           A  1350    ;addr                                  IX+6    
                           A  1351    
                           A  1352    
                           A  1353    ; Stack Frame Size: 30 (bytes)
                           A  1354    ;       Spill Code: 0 (instruction)
                           A  1355    
                           A  1356    
                           A  1357    .ENDFUNC "SD_readBlocks",156,"_SD_readBlocks"
                           A  1358    ;  157	
                           A  1359    ;  158	BYTE SD_writeBlocks(DWORD addr, BYTE *b
04067A                     A  1360    _SD_writeBlocks:
                           A  1361    .DEFINE "_SD_writeBlocks"
                           A  1362    
                           A  1363    .VALUE _SD_writeBlocks
                           A  1364    
                           A  1365    .CLASS 2
                           A  1366    
                           A  1367    .TYPE 76
                           A  1368    
                           A  1369    .ENDEF
                           A  1370    
                           A  1371    .BEGFUNC "SD_writeBlocks",158,"_SD_writeBlocks"
                           A  1372    
                           A  1373    .LINE 158
                           A  1374    
                           A  1375    .DEFINE "addr"
                           A  1376    
                           A  1377    .CLASS 65
                           A  1378    
                           A  1379    .VALUE 6
                           A  1380    
                           A  1381    .TYPE 15
                           A  1382    
                           A  1383    .ENDEF
                           A  1384    
                           A  1385    .DEFINE "buf"
                           A  1386    
                           A  1387    .CLASS 65
                           A  1388    
                           A  1389    .VALUE 12
                           A  1390    
                           A  1391    .TYPE 44
                           A  1392    
                           A  1393    .ENDEF
                           A  1394    
                           A  1395    .DEFINE "count"
                           A  1396    
                           A  1397    .CLASS 65
                           A  1398    
                           A  1399    .VALUE 15
                           A  1400    
                           A  1401    .TYPE 13
                           A  1402    
                           A  1403    .ENDEF
                           A  1404    
                           A  1405    .DEFINE "i"
                           A  1406    
                           A  1407    .CLASS 65
                           A  1408    
                           A  1409    .VALUE -3
                           A  1410    
                           A  1411    .TYPE 14
                           A  1412    
                           A  1413    .ENDEF
                           A  1414    
                           A  1415    .DEFINE "res"
                           A  1416    
                           A  1417    .CLASS 65
                           A  1418    
                           A  1419    .VALUE -4
                           A  1420    
                           A  1421    .TYPE 12
                           A  1422    
                           A  1423    .ENDEF
                           A  1424    
                           A  1425    .DEFINE "token"
                           A  1426    
                           A  1427    .CLASS 65
                           A  1428    
                           A  1429    .VALUE -5
                           A  1430    
                           A  1431    .TYPE 12
                           A  1432    
                           A  1433    .ENDEF
                           A  1434    
                           A  1435    .DEFINE "ptr"
                           A  1436    
                           A  1437    .CLASS 65
                           A  1438    
                           A  1439    .VALUE -8
                           A  1440    
                           A  1441    .TYPE 44
                           A  1442    
                           A  1443    .ENDEF
                           A  1444    
                           A  1445    .DEFINE "sector"
                           A  1446    
                           A  1447    .CLASS 65
                           A  1448    
                           A  1449    .VALUE -12
                           A  1450    
                           A  1451    .TYPE 15
                           A  1452    
                           A  1453    .ENDEF
                           A  1454    
04067A DDE5                A  1455    	PUSH	IX
04067C DD210000 00         A  1456    	LD	IX,0
040681 DD39                A  1457    	ADD	IX,SP
040683 ED22F4              A  1458    	LEA	HL,IX+%FFFFFFF4
040686 F9                  A  1459    	LD	SP,HL
                           A  1460    ;  159		DWORD	sector = addr;
                           A  1461    .LINE 159
                           A  1462    
040687 DD0706              A  1463    	LD	BC,(IX+%6)
04068A DD7E09              A  1464    	LD	A,(IX+%9)
04068D DD0FF4              A  1465    	LD	(IX+%FFFFFFF4),BC
040690 DD77F7              A  1466    	LD	(IX+%FFFFFFF7),A
                           A  1467    ;  160		BYTE	res;
                           A  1468    ;  161		BYTE	token;
                           A  1469    ;  162		BYTE *	ptr = buf;
                           A  1470    .LINE 162
                           A  1471    
040693 DD070C              A  1472    	LD	BC,(IX+%C)
040696 DD0FF8              A  1473    	LD	(IX+%FFFFFFF8),BC
                           A  1474    ;  163		UINT	i;
                           A  1475    ;  164	
                           A  1476    ;  165		for(i = 0; i < count; i++) {
                           A  1477    .LINE 165
                           A  1478    
040699 01000000            A  1479    	LD	BC,0
04069D DD0FFD              A  1480    	LD	(IX+%FFFFFFFD),BC
0406A0 18 50               A  1481    	JR	L_37
0406A2                     A  1482    L_35:
                           A  1483    ;  166			res = SD_writeSingleBlock(secto
                           A  1484    .LINE 166
                           A  1485    
0406A2 ED65FB              A  1486    	PEA	IX+%FFFFFFFB
0406A5 DD07F8              A  1487    	LD	BC,(IX+%FFFFFFF8)
0406A8 C5                  A  1488    	PUSH	BC
0406A9 DD4EF7              A  1489    	LD	C,(IX+%FFFFFFF7)
0406AC 0600                A  1490    	LD	B,%0
0406AE C5                  A  1491    	PUSH	BC
0406AF DD07F4              A  1492    	LD	BC,(IX+%FFFFFFF4)
0406B2 C5                  A  1493    	PUSH	BC
0406B3 CD 09 07 04         A  1494    	CALL	_SD_writeSingleBlock
0406B7 C1                  A  1495    	POP	BC
0406B8 C1                  A  1496    	POP	BC
0406B9 C1                  A  1497    	POP	BC
0406BA C1                  A  1498    	POP	BC
0406BB DD77FC              A  1499    	LD	(IX+%FFFFFFFC),A
                           A  1500    ;  167			if(res == 0x00 && token == SD_D
                           A  1501    .LINE 167
                           A  1502    
0406BE B7                  A  1503    	OR	A,A
0406BF 20 26               A  1504    	JR	NZ,L_34
0406C1 DD7EFB              A  1505    	LD	A,(IX+%FFFFFFFB)
0406C4 FE05                A  1506    	CP	A,%5
0406C6 20 1F               A  1507    	JR	NZ,L_34
                           A  1508    ;  168				sector++;
                           A  1509    .LINE 168
                           A  1510    
0406C8 DD27F4              A  1511    	LD	HL,(IX+%FFFFFFF4)
0406CB DD5EF7              A  1512    	LD	E,(IX+%FFFFFFF7)
0406CE 3E01                A  1513    	LD	A,%1
0406D0 CD 68 42 04         A  1514    	CALL	__ladd_b
0406D4 DD2FF4              A  1515    	LD	(IX+%FFFFFFF4),HL
0406D7 DD73F7              A  1516    	LD	(IX+%FFFFFFF7),E
                           A  1517    ;  169				ptr += SD_BLOCK_LEN;
                           A  1518    .LINE 169
                           A  1519    
0406DA 01000200            A  1520    	LD	BC,512
0406DE DD27F8              A  1521    	LD	HL,(IX+%FFFFFFF8)
0406E1 09                  A  1522    	ADD	HL,BC
0406E2 DD2FF8              A  1523    	LD	(IX+%FFFFFFF8),HL
                           A  1524    ;  170			}
                           A  1525    ;  171			else {
                           A  1526    .LINE 171
                           A  1527    
0406E5 18 04               A  1528    	JR	L_36
0406E7                     A  1529    L_34:
                           A  1530    ;  172				return SD_ERROR;
                           A  1531    .LINE 172
                           A  1532    
0406E7 3E01                A  1533    	LD	A,%1
0406E9 18 19               A  1534    	JR	L_39
                           A  1535    ;  173			}
                           A  1536    ;  174		}	
0406EB                     A  1537    L_36:
                           A  1538    .LINE 174
                           A  1539    
0406EB DD07FD              A  1540    	LD	BC,(IX+%FFFFFFFD)
0406EE 03                  A  1541    	INC	BC
0406EF DD0FFD              A  1542    	LD	(IX+%FFFFFFFD),BC
0406F2                     A  1543    L_37:
0406F2 DD070F              A  1544    	LD	BC,(IX+%F)
0406F5 CD 54 43 04         A  1545    	CALL	__stoiu
0406F9 E5C1                A  1546    	LD	BC,HL
0406FB DD27FD              A  1547    	LD	HL,(IX+%FFFFFFFD)
0406FE B7                  A  1548    	OR	A,A
0406FF ED42                A  1549    	SBC	HL,BC
040701 38 9F               A  1550    	JR	C,L_35
                           A  1551    ;  175		return SD_SUCCESS;	
                           A  1552    .LINE 175
                           A  1553    
040703 AF                  A  1554    	XOR	A,A
                           A  1555    ;  176	}
040704                     A  1556    L_39:
                           A  1557    .LINE 176
                           A  1558    
040704 DDF9                A  1559    	LD	SP,IX
040706 DDE1                A  1560    	POP	IX
040708 C9                  A  1561    	RET	
                           A  1562    
                           A  1563    
                           A  1564    ;**************************** _SD_writeBlocks *
                           A  1565    ;Name                         Addr/Register   S
                           A  1566    ;_SD_writeSingleBlock                IMPORT  --
                           A  1567    ;sector                               IX-12    
                           A  1568    ;ptr                                   IX-8    
                           A  1569    ;token                                 IX-5    
                           A  1570    ;res                                   IX-4    
                           A  1571    ;i                                     IX-3    
                           A  1572    ;count                                IX+15    
                           A  1573    ;buf                                  IX+12    
                           A  1574    ;addr                                  IX+6    
                           A  1575    
                           A  1576    
                           A  1577    ; Stack Frame Size: 30 (bytes)
                           A  1578    ;       Spill Code: 0 (instruction)
                           A  1579    
                           A  1580    
                           A  1581    .ENDFUNC "SD_writeBlocks",176,"_SD_writeBlocks"
                           A  1582    ;  177	
                           A  1583    ;  178	BYTE SD_writeSingleBlock(DWORD addr, BY
040709                     A  1584    _SD_writeSingleBlock:
                           A  1585    .DEFINE "_SD_writeSingleBlock"
                           A  1586    
                           A  1587    .VALUE _SD_writeSingleBlock
                           A  1588    
                           A  1589    .CLASS 2
                           A  1590    
                           A  1591    .TYPE 76
                           A  1592    
                           A  1593    .ENDEF
                           A  1594    
                           A  1595    .BEGFUNC "SD_writeSingleBlock",178,"_SD_writeSi
                           A  1596    
                           A  1597    .LINE 178
                           A  1598    
                           A  1599    .DEFINE "addr"
                           A  1600    
                           A  1601    .CLASS 65
                           A  1602    
                           A  1603    .VALUE 6
                           A  1604    
                           A  1605    .TYPE 15
                           A  1606    
                           A  1607    .ENDEF
                           A  1608    
                           A  1609    .DEFINE "buf"
                           A  1610    
                           A  1611    .CLASS 65
                           A  1612    
                           A  1613    .VALUE 12
                           A  1614    
                           A  1615    .TYPE 44
                           A  1616    
                           A  1617    .ENDEF
                           A  1618    
                           A  1619    .DEFINE "token"
                           A  1620    
                           A  1621    .CLASS 65
                           A  1622    
                           A  1623    .VALUE 15
                           A  1624    
                           A  1625    .TYPE 44
                           A  1626    
                           A  1627    .ENDEF
                           A  1628    
                           A  1629    .DEFINE "readAttempts"
                           A  1630    
                           A  1631    .CLASS 65
                           A  1632    
                           A  1633    .VALUE -1
                           A  1634    
                           A  1635    .TYPE 12
                           A  1636    
                           A  1637    .ENDEF
                           A  1638    
                           A  1639    .DEFINE "i"
                           A  1640    
                           A  1641    .CLASS 65
                           A  1642    
                           A  1643    .VALUE -3
                           A  1644    
                           A  1645    .TYPE 13
                           A  1646    
                           A  1647    .ENDEF
                           A  1648    
                           A  1649    .DEFINE "read"
                           A  1650    
                           A  1651    .CLASS 65
                           A  1652    
                           A  1653    .VALUE -4
                           A  1654    
                           A  1655    .TYPE 12
                           A  1656    
                           A  1657    .ENDEF
                           A  1658    
                           A  1659    .DEFINE "res1"
                           A  1660    
                           A  1661    .CLASS 65
                           A  1662    
                           A  1663    .VALUE -5
                           A  1664    
                           A  1665    .TYPE 12
                           A  1666    
                           A  1667    .ENDEF
                           A  1668    
040709 DDE5                A  1669    	PUSH	IX
04070B DD210000 00         A  1670    	LD	IX,0
040710 DD39                A  1671    	ADD	IX,SP
040712 C5                  A  1672    	PUSH	BC
040713 3B                  A  1673    	DEC	SP
040714 3B                  A  1674    	DEC	SP
                           A  1675    ;  179	    BYTE	res1;
                           A  1676    ;  180		BYTE 	readAttempts;
                           A  1677    ;  181		BYTE	read = 0x00;
                           A  1678    .LINE 181
                           A  1679    
040715 DD36FC00            A  1680    	LD	(IX+%FFFFFFFC),%0
                           A  1681    ;  182		WORD	i;
                           A  1682    ;  183		//
                           A  1683    ;  184	    // Set token to none
                           A  1684    ;  185		//
                           A  1685    ;  186	    *token = 0xFF;
                           A  1686    .LINE 186
                           A  1687    
040719 DD270F              A  1688    	LD	HL,(IX+%F)
04071C 36FF                A  1689    	LD	(HL),%FF
                           A  1690    ;  187		//
                           A  1691    ;  188	    // Assert chip select
                           A  1692    ;  189		//
                           A  1693    ;  190	    spi_transfer(0xFF);
                           A  1694    .LINE 190
                           A  1695    
04071E 01FF0000            A  1696    	LD	BC,255
040722 C5                  A  1697    	PUSH	BC
040723 CD 2C 3E 04         A  1698    	CALL	_spi_transfer
040727 C1                  A  1699    	POP	BC
                           A  1700    ;  191		SD_CS_enable();
                           A  1701    .LINE 191
                           A  1702    
040728 CD 00 3E 04         A  1703    	CALL	_SD_CS_enable
                           A  1704    ;  192	    spi_transfer(0xFF);
                           A  1705    .LINE 192
                           A  1706    
04072C 01FF0000            A  1707    	LD	BC,255
040730 C5                  A  1708    	PUSH	BC
040731 CD 2C 3E 04         A  1709    	CALL	_spi_transfer
040735 C1                  A  1710    	POP	BC
                           A  1711    ;  193		//
                           A  1712    ;  194	    // Send CMD24
                           A  1713    ;  195		//
                           A  1714    ;  196	    SD_command(CMD24, addr, CMD24_CRC);
                           A  1715    .LINE 196
                           A  1716    
040736 01000000            A  1717    	LD	BC,0
04073A C5                  A  1718    	PUSH	BC
04073B DD4E09              A  1719    	LD	C,(IX+%9)
04073E 0600                A  1720    	LD	B,%0
040740 C5                  A  1721    	PUSH	BC
040741 DD0706              A  1722    	LD	BC,(IX+%6)
040744 C5                  A  1723    	PUSH	BC
040745 01180000            A  1724    	LD	BC,24
040749 C5                  A  1725    	PUSH	BC
04074A CD A9 02 04         A  1726    	CALL	_SD_command
04074E C1                  A  1727    	POP	BC
04074F C1                  A  1728    	POP	BC
040750 C1                  A  1729    	POP	BC
040751 C1                  A  1730    	POP	BC
                           A  1731    ;  197		//
                           A  1732    ;  198	    // Read response
                           A  1733    ;  199		//
                           A  1734    ;  200	    res1 = SD_readRes1();
                           A  1735    .LINE 200
                           A  1736    
040752 CD 17 03 04         A  1737    	CALL	_SD_readRes1
040756 DD77FB              A  1738    	LD	(IX+%FFFFFFFB),A
                           A  1739    ;  201	
                           A  1740    ;  202	    // If no error
                           A  1741    ;  203	    if(res1 == SD_READY) {
                           A  1742    .LINE 203
                           A  1743    
040759 B7                  A  1744    	OR	A,A
04075A C2 09 08 04         A  1745    	JR	NZ,L_54
                           A  1746    ;  204			//
                           A  1747    ;  205	        // Send start token
                           A  1748    ;  206			//
                           A  1749    ;  207	        spi_transfer(SD_START_TOKEN);
                           A  1750    .LINE 207
                           A  1751    
04075E 01FE0000            A  1752    	LD	BC,254
040762 C5                  A  1753    	PUSH	BC
040763 CD 2C 3E 04         A  1754    	CALL	_spi_transfer
040767 C1                  A  1755    	POP	BC
                           A  1756    ;  208	
                           A  1757    ;  209	        // Write buffer to card
                           A  1758    ;  210			//
                           A  1759    ;  211	        for(i = 0; i < SD_BLOCK_LEN; i+
                           A  1760    .LINE 211
                           A  1761    
040768 DD36FD00            A  1762    	LD	(IX+%FFFFFFFD),%0
04076C DD36FE00            A  1763    	LD	(IX+%FFFFFFFE),%0
040770 18 1E               A  1764    	JR	L_43
040772                     A  1765    L_41:
                           A  1766    ;  212				spi_transfer(buf[i]);
                           A  1767    .LINE 212
                           A  1768    
040772 DD07FD              A  1769    	LD	BC,(IX+%FFFFFFFD)
040775 CD 54 43 04         A  1770    	CALL	__stoiu
040779 DD070C              A  1771    	LD	BC,(IX+%C)
04077C 09                  A  1772    	ADD	HL,BC
04077D 4E                  A  1773    	LD	C,(HL)
04077E 0600                A  1774    	LD	B,%0
040780 C5                  A  1775    	PUSH	BC
040781 CD 2C 3E 04         A  1776    	CALL	_spi_transfer
040785 C1                  A  1777    	POP	BC
040786 DD27FD              A  1778    	LD	HL,(IX+%FFFFFFFD)
040789 23                  A  1779    	INC	HL
04078A DD75FD              A  1780    	LD	(IX+%FFFFFFFD),L
04078D DD74FE              A  1781    	LD	(IX+%FFFFFFFE),H
                           A  1782    ;  213			}
040790                     A  1783    L_43:
                           A  1784    .LINE 213
                           A  1785    
040790 49010002            A  1786    	LD.LIS	BC,512
040794 DD27FD              A  1787    	LD	HL,(IX+%FFFFFFFD)
040797 B7                  A  1788    	OR	A,A
040798 40ED42              A  1789    	SBC.SIS	HL,BC
04079B 38 D5               A  1790    	JR	C,L_41
                           A  1791    ;  214			//
                           A  1792    ;  215	        // Wait for a response (timeout
                           A  1793    ;  216			//
                           A  1794    ;  217	        readAttempts = 0;
                           A  1795    .LINE 217
                           A  1796    
04079D DD36FF00            A  1797    	LD	(IX+%FFFFFFFF),%0
                           A  1798    ;  218	        while(++readAttempts != SD_MAX_
                           A  1799    .LINE 218
                           A  1800    
0407A1 18 18               A  1801    	JR	L_46
0407A3                     A  1802    L_47:
                           A  1803    ;  219	            if((read = spi_transfer(0xF
                           A  1804    .LINE 219
                           A  1805    
0407A3 01FF0000            A  1806    	LD	BC,255
0407A7 C5                  A  1807    	PUSH	BC
0407A8 CD 2C 3E 04         A  1808    	CALL	_spi_transfer
0407AC C1                  A  1809    	POP	BC
0407AD DD77FC              A  1810    	LD	(IX+%FFFFFFFC),A
0407B0 FEFF                A  1811    	CP	A,%FF
0407B2 28 07               A  1812    	JR	Z,L_46
                           A  1813    ;  220					*token = 0xFF;
                           A  1814    .LINE 220
                           A  1815    
0407B4 DD270F              A  1816    	LD	HL,(IX+%F)
0407B7 36FF                A  1817    	LD	(HL),%FF
                           A  1818    ;  221					break;
                           A  1819    .LINE 221
                           A  1820    
0407B9 18 13               A  1821    	JR	L_52
                           A  1822    ;  222				}
0407BB                     A  1823    L_46:
                           A  1824    .LINE 222
                           A  1825    
0407BB DD34FF              A  1826    	INC	(IX+%FFFFFFFF)
0407BE DD7EFF              A  1827    	LD	A,(IX+%FFFFFFFF)
0407C1 B7ED62              A  1828    	UEXT	HL
0407C4 6F                  A  1829    	LD	L,A
0407C5 01430F00            A  1830    	LD	BC,3907
0407C9 B7                  A  1831    	OR	A,A
0407CA ED42                A  1832    	SBC	HL,BC
0407CC 20 D5               A  1833    	JR	NZ,L_47
0407CE                     A  1834    L_52:
                           A  1835    ;  223			//
                           A  1836    ;  224	        // If data accepted
                           A  1837    ;  225			//
                           A  1838    ;  226	        if((read & 0x1F) == 0x05) {
                           A  1839    .LINE 226
                           A  1840    
0407CE DD7EFC              A  1841    	LD	A,(IX+%FFFFFFFC)
0407D1 E61F                A  1842    	AND	A,%1F
0407D3 FE05                A  1843    	CP	A,%5
0407D5 20 32               A  1844    	JR	NZ,L_54
                           A  1845    ;  227				//
                           A  1846    ;  228	            // Set token to data accept
                           A  1847    ;  229				//
                           A  1848    ;  230	            *token = 0x05;
                           A  1849    .LINE 230
                           A  1850    
0407D7 DD270F              A  1851    	LD	HL,(IX+%F)
0407DA 3605                A  1852    	LD	(HL),%5
                           A  1853    ;  231				//
                           A  1854    ;  232	            // Wait for write to finish
                           A  1855    ;  233				//
                           A  1856    ;  234	            readAttempts = 0;
                           A  1857    .LINE 234
                           A  1858    
0407DC DD36FF00            A  1859    	LD	(IX+%FFFFFFFF),%0
                           A  1860    ;  235	            while(spi_transfer(0xFF) ==
                           A  1861    .LINE 235
                           A  1862    
0407E0 18 1A               A  1863    	JR	L_49
0407E2                     A  1864    L_50:
                           A  1865    ;  236	                if(++readAttempts == SD
                           A  1866    .LINE 236
                           A  1867    
0407E2 DD34FF              A  1868    	INC	(IX+%FFFFFFFF)
0407E5 DD7EFF              A  1869    	LD	A,(IX+%FFFFFFFF)
0407E8 B7ED62              A  1870    	UEXT	HL
0407EB 6F                  A  1871    	LD	L,A
0407EC 01430F00            A  1872    	LD	BC,3907
0407F0 B7                  A  1873    	OR	A,A
0407F1 ED42                A  1874    	SBC	HL,BC
0407F3 20 07               A  1875    	JR	NZ,L_49
                           A  1876    ;  237						*token = 0x00;
                           A  1877    .LINE 237
                           A  1878    
0407F5 DD270F              A  1879    	LD	HL,(IX+%F)
0407F8 3600                A  1880    	LD	(HL),%0
                           A  1881    ;  238						break;
                           A  1882    .LINE 238
                           A  1883    
0407FA 18 0D               A  1884    	JR	L_54
                           A  1885    ;  239					}
                           A  1886    ;  240				}
0407FC                     A  1887    L_49:
                           A  1888    .LINE 240
                           A  1889    
0407FC 01FF0000            A  1890    	LD	BC,255
040800 C5                  A  1891    	PUSH	BC
040801 CD 2C 3E 04         A  1892    	CALL	_spi_transfer
040805 C1                  A  1893    	POP	BC
040806 B7                  A  1894    	OR	A,A
040807 28 D9               A  1895    	JR	Z,L_50
                           A  1896    ;  241	        }
                           A  1897    ;  242	    }
040809                     A  1898    L_54:
                           A  1899    .LINE 242
                           A  1900    
                           A  1901    ;  243		//
                           A  1902    ;  244	    // Deassert chip select
                           A  1903    ;  245		//
                           A  1904    ;  246	    spi_transfer(0xFF);
                           A  1905    .LINE 246
                           A  1906    
040809 01FF0000            A  1907    	LD	BC,255
04080D C5                  A  1908    	PUSH	BC
04080E CD 2C 3E 04         A  1909    	CALL	_spi_transfer
040812 C1                  A  1910    	POP	BC
                           A  1911    ;  247	    SD_CS_disable();
                           A  1912    .LINE 247
                           A  1913    
040813 CD 16 3E 04         A  1914    	CALL	_SD_CS_disable
                           A  1915    ;  248	    spi_transfer(0xFF);
                           A  1916    .LINE 248
                           A  1917    
040817 01FF0000            A  1918    	LD	BC,255
04081B C5                  A  1919    	PUSH	BC
04081C CD 2C 3E 04         A  1920    	CALL	_spi_transfer
040820 C1                  A  1921    	POP	BC
                           A  1922    ;  249	
                           A  1923    ;  250	    return res1;	
                           A  1924    .LINE 250
                           A  1925    
040821 DD7EFB              A  1926    	LD	A,(IX+%FFFFFFFB)
                           A  1927    ;  251	}
                           A  1928    .LINE 251
                           A  1929    
040824 DDF9                A  1930    	LD	SP,IX
040826 DDE1                A  1931    	POP	IX
040828 C9                  A  1932    	RET	
                           A  1933    
                           A  1934    
                           A  1935    ;**************************** _SD_writeSingleBl
                           A  1936    ;Name                         Addr/Register   S
                           A  1937    ;_SD_CS_disable                      IMPORT  --
                           A  1938    ;_SD_readRes1                        IMPORT  --
                           A  1939    ;_SD_command                         IMPORT  --
                           A  1940    ;_SD_CS_enable                       IMPORT  --
                           A  1941    ;_spi_transfer                       IMPORT  --
                           A  1942    ;res1                                  IX-5    
                           A  1943    ;read                                  IX-4    
                           A  1944    ;i                                     IX-3    
                           A  1945    ;readAttempts                          IX-1    
                           A  1946    ;token                                IX+15    
                           A  1947    ;buf                                  IX+12    
                           A  1948    ;addr                                  IX+6    
                           A  1949    
                           A  1950    
                           A  1951    ; Stack Frame Size: 23 (bytes)
                           A  1952    ;       Spill Code: 0 (instruction)
                           A  1953    
                           A  1954    
                           A  1955    .ENDFUNC "SD_writeSingleBlock",251,"_SD_writeSi
                           A  1956    ;  252	
                           A  1957    ;  253	BYTE SD_readSingleBlock(DWORD addr, BYT
                           A  1958    ;  254	{
040829                     A  1959    _SD_readSingleBlock:
                           A  1960    .DEFINE "_SD_readSingleBlock"
                           A  1961    
                           A  1962    .VALUE _SD_readSingleBlock
                           A  1963    
                           A  1964    .CLASS 2
                           A  1965    
                           A  1966    .TYPE 76
                           A  1967    
                           A  1968    .ENDEF
                           A  1969    
                           A  1970    .BEGFUNC "SD_readSingleBlock",254,"_SD_readSing
                           A  1971    
                           A  1972    .LINE 254
                           A  1973    
                           A  1974    .DEFINE "addr"
                           A  1975    
                           A  1976    .CLASS 65
                           A  1977    
                           A  1978    .VALUE 6
                           A  1979    
                           A  1980    .TYPE 15
                           A  1981    
                           A  1982    .ENDEF
                           A  1983    
                           A  1984    .DEFINE "buf"
                           A  1985    
                           A  1986    .CLASS 65
                           A  1987    
                           A  1988    .VALUE 12
                           A  1989    
                           A  1990    .TYPE 44
                           A  1991    
                           A  1992    .ENDEF
                           A  1993    
                           A  1994    .DEFINE "token"
                           A  1995    
                           A  1996    .CLASS 65
                           A  1997    
                           A  1998    .VALUE 15
                           A  1999    
                           A  2000    .TYPE 44
                           A  2001    
                           A  2002    .ENDEF
                           A  2003    
                           A  2004    .DEFINE "read"
                           A  2005    
                           A  2006    .CLASS 65
                           A  2007    
                           A  2008    .VALUE -1
                           A  2009    
                           A  2010    .TYPE 12
                           A  2011    
                           A  2012    .ENDEF
                           A  2013    
                           A  2014    .DEFINE "i"
                           A  2015    
                           A  2016    .CLASS 65
                           A  2017    
                           A  2018    .VALUE -3
                           A  2019    
                           A  2020    .TYPE 13
                           A  2021    
                           A  2022    .ENDEF
                           A  2023    
                           A  2024    .DEFINE "readAttempts"
                           A  2025    
                           A  2026    .CLASS 65
                           A  2027    
                           A  2028    .VALUE -5
                           A  2029    
                           A  2030    .TYPE 13
                           A  2031    
                           A  2032    .ENDEF
                           A  2033    
                           A  2034    .DEFINE "res1"
                           A  2035    
                           A  2036    .CLASS 65
                           A  2037    
                           A  2038    .VALUE -6
                           A  2039    
                           A  2040    .TYPE 12
                           A  2041    
                           A  2042    .ENDEF
                           A  2043    
040829 DDE5                A  2044    	PUSH	IX
04082B DD210000 00         A  2045    	LD	IX,0
040830 DD39                A  2046    	ADD	IX,SP
040832 C5                  A  2047    	PUSH	BC
040833 C5                  A  2048    	PUSH	BC
                           A  2049    ;  255	    BYTE	res1;
                           A  2050    ;  256		BYTE	read = 0x00;
                           A  2051    .LINE 256
                           A  2052    
040834 DD36FF00            A  2053    	LD	(IX+%FFFFFFFF),%0
                           A  2054    ;  257	    WORD	readAttempts, i;
                           A  2055    ;  258		//
                           A  2056    ;  259	    // Set token to none
                           A  2057    ;  260		//
                           A  2058    ;  261	    *token = 0xFF;
                           A  2059    .LINE 261
                           A  2060    
040838 DD270F              A  2061    	LD	HL,(IX+%F)
04083B 36FF                A  2062    	LD	(HL),%FF
                           A  2063    ;  262		//
                           A  2064    ;  263	    // Assert chip select
                           A  2065    ;  264		//
                           A  2066    ;  265	    spi_transfer(0xFF);
                           A  2067    .LINE 265
                           A  2068    
04083D 01FF0000            A  2069    	LD	BC,255
040841 C5                  A  2070    	PUSH	BC
040842 CD 2C 3E 04         A  2071    	CALL	_spi_transfer
040846 C1                  A  2072    	POP	BC
                           A  2073    ;  266	    SD_CS_enable();
                           A  2074    .LINE 266
                           A  2075    
040847 CD 00 3E 04         A  2076    	CALL	_SD_CS_enable
                           A  2077    ;  267	    spi_transfer(0xFF);
                           A  2078    .LINE 267
                           A  2079    
04084B 01FF0000            A  2080    	LD	BC,255
04084F C5                  A  2081    	PUSH	BC
040850 CD 2C 3E 04         A  2082    	CALL	_spi_transfer
040854 C1                  A  2083    	POP	BC
                           A  2084    ;  268		//
                           A  2085    ;  269	    // Send CMD17
                           A  2086    ;  270		//
                           A  2087    ;  271	    SD_command(CMD17, addr, CMD17_CRC);
                           A  2088    .LINE 271
                           A  2089    
040855 01000000            A  2090    	LD	BC,0
040859 C5                  A  2091    	PUSH	BC
04085A DD4E09              A  2092    	LD	C,(IX+%9)
04085D 0600                A  2093    	LD	B,%0
04085F C5                  A  2094    	PUSH	BC
040860 DD0706              A  2095    	LD	BC,(IX+%6)
040863 C5                  A  2096    	PUSH	BC
040864 01110000            A  2097    	LD	BC,17
040868 C5                  A  2098    	PUSH	BC
040869 CD A9 02 04         A  2099    	CALL	_SD_command
04086D C1                  A  2100    	POP	BC
04086E C1                  A  2101    	POP	BC
04086F C1                  A  2102    	POP	BC
040870 C1                  A  2103    	POP	BC
                           A  2104    ;  272		//
                           A  2105    ;  273	    // Read R1
                           A  2106    ;  274		//
                           A  2107    ;  275	    res1 = SD_readRes1();
                           A  2108    .LINE 275
                           A  2109    
040871 CD 17 03 04         A  2110    	CALL	_SD_readRes1
040875 DD77FA              A  2111    	LD	(IX+%FFFFFFFA),A
                           A  2112    ;  276		//
                           A  2113    ;  277	    // If response received from card
                           A  2114    ;  278		//
                           A  2115    ;  279	    if(res1 != 0xFF) {
                           A  2116    .LINE 279
                           A  2117    
040878 FEFF                A  2118    	CP	A,%FF
04087A CA 08 09 04         A  2119    	JR	Z,L_69
                           A  2120    ;  280			//
                           A  2121    ;  281	        // Wait for a response token (t
                           A  2122    ;  282			//
                           A  2123    ;  283	        readAttempts = 0;
                           A  2124    .LINE 283
                           A  2125    
04087E DD36FB00            A  2126    	LD	(IX+%FFFFFFFB),%0
040882 DD36FC00            A  2127    	LD	(IX+%FFFFFFFC),%0
                           A  2128    ;  284	        while(++readAttempts != SD_MAX_
                           A  2129    .LINE 284
                           A  2130    
040886 18 11               A  2131    	JR	L_57
040888                     A  2132    L_58:
                           A  2133    ;  285	            if((read = spi_transfer(0xF
                           A  2134    .LINE 285
                           A  2135    
040888 01FF0000            A  2136    	LD	BC,255
04088C C5                  A  2137    	PUSH	BC
04088D CD 2C 3E 04         A  2138    	CALL	_spi_transfer
040891 C1                  A  2139    	POP	BC
040892 DD77FF              A  2140    	LD	(IX+%FFFFFFFF),A
040895 FEFF                A  2141    	CP	A,%FF
040897 20 17               A  2142    	JR	NZ,L_66
                           A  2143    ;  286					break;
040899                     A  2144    L_57:
                           A  2145    .LINE 286
                           A  2146    
040899 DD27FB              A  2147    	LD	HL,(IX+%FFFFFFFB)
04089C 23                  A  2148    	INC	HL
04089D DD75FB              A  2149    	LD	(IX+%FFFFFFFB),L
0408A0 DD74FC              A  2150    	LD	(IX+%FFFFFFFC),H
0408A3 49011B06            A  2151    	LD.LIS	BC,1563
0408A7 DD27FB              A  2152    	LD	HL,(IX+%FFFFFFFB)
0408AA B7                  A  2153    	OR	A,A
0408AB 40ED42              A  2154    	SBC.SIS	HL,BC
0408AE 20 D8               A  2155    	JR	NZ,L_58
0408B0                     A  2156    L_66:
                           A  2157    ;  287			//
                           A  2158    ;  288	        // If response token is 0xFE
                           A  2159    ;  289			//
                           A  2160    ;  290	        if(read == SD_START_TOKEN) {
                           A  2161    .LINE 290
                           A  2162    
0408B0 DD7EFF              A  2163    	LD	A,(IX+%FFFFFFFF)
0408B3 FEFE                A  2164    	CP	A,%FE
0408B5 20 4A               A  2165    	JR	NZ,L_67
                           A  2166    ;  291				//
                           A  2167    ;  292	            // Read 512 byte block
                           A  2168    ;  293				//
                           A  2169    ;  294	            for(i = 0; i < SD_BLOCK_LEN
                           A  2170    .LINE 294
                           A  2171    
0408B7 DD36FD00            A  2172    	LD	(IX+%FFFFFFFD),%0
0408BB DD36FE00            A  2173    	LD	(IX+%FFFFFFFE),%0
0408BF 18 1F               A  2174    	JR	L_63
0408C1                     A  2175    L_61:
                           A  2176    ;  295					*buf++ = spi_transfer(0
                           A  2177    .LINE 295
                           A  2178    
0408C1 01FF0000            A  2179    	LD	BC,255
0408C5 C5                  A  2180    	PUSH	BC
0408C6 CD 2C 3E 04         A  2181    	CALL	_spi_transfer
0408CA C1                  A  2182    	POP	BC
0408CB DD270C              A  2183    	LD	HL,(IX+%C)
0408CE 77                  A  2184    	LD	(HL),A
0408CF DD070C              A  2185    	LD	BC,(IX+%C)
0408D2 03                  A  2186    	INC	BC
0408D3 DD0F0C              A  2187    	LD	(IX+%C),BC
0408D6 DD27FD              A  2188    	LD	HL,(IX+%FFFFFFFD)
0408D9 23                  A  2189    	INC	HL
0408DA DD75FD              A  2190    	LD	(IX+%FFFFFFFD),L
0408DD DD74FE              A  2191    	LD	(IX+%FFFFFFFE),H
                           A  2192    ;  296				}
0408E0                     A  2193    L_63:
                           A  2194    .LINE 296
                           A  2195    
0408E0 49010002            A  2196    	LD.LIS	BC,512
0408E4 DD27FD              A  2197    	LD	HL,(IX+%FFFFFFFD)
0408E7 B7                  A  2198    	OR	A,A
0408E8 40ED42              A  2199    	SBC.SIS	HL,BC
0408EB 38 D4               A  2200    	JR	C,L_61
                           A  2201    ;  297				//
                           A  2202    ;  298	            // Read 16-bit CRC
                           A  2203    ;  299				//
                           A  2204    ;  300	            spi_transfer(0xFF);
                           A  2205    .LINE 300
                           A  2206    
0408ED 01FF0000            A  2207    	LD	BC,255
0408F1 C5                  A  2208    	PUSH	BC
0408F2 CD 2C 3E 04         A  2209    	CALL	_spi_transfer
0408F6 C1                  A  2210    	POP	BC
                           A  2211    ;  301	            spi_transfer(0xFF);
                           A  2212    .LINE 301
                           A  2213    
0408F7 01FF0000            A  2214    	LD	BC,255
0408FB C5                  A  2215    	PUSH	BC
0408FC CD 2C 3E 04         A  2216    	CALL	_spi_transfer
040900 C1                  A  2217    	POP	BC
                           A  2218    ;  302	        }
040901                     A  2219    L_67:
                           A  2220    .LINE 302
                           A  2221    
                           A  2222    ;  303			//
                           A  2223    ;  304	        // Set token to card response
                           A  2224    ;  305			//
                           A  2225    ;  306	        *token = read;
                           A  2226    .LINE 306
                           A  2227    
040901 DD270F              A  2228    	LD	HL,(IX+%F)
040904 DD7EFF              A  2229    	LD	A,(IX+%FFFFFFFF)
040907 77                  A  2230    	LD	(HL),A
                           A  2231    ;  307	    }
040908                     A  2232    L_69:
                           A  2233    .LINE 307
                           A  2234    
                           A  2235    ;  308		//
                           A  2236    ;  309	    // Deassert chip select
                           A  2237    ;  310		//
                           A  2238    ;  311	    spi_transfer(0xFF);
                           A  2239    .LINE 311
                           A  2240    
040908 01FF0000            A  2241    	LD	BC,255
04090C C5                  A  2242    	PUSH	BC
04090D CD 2C 3E 04         A  2243    	CALL	_spi_transfer
040911 C1                  A  2244    	POP	BC
                           A  2245    ;  312	    SD_CS_disable();
                           A  2246    .LINE 312
                           A  2247    
040912 CD 16 3E 04         A  2248    	CALL	_SD_CS_disable
                           A  2249    ;  313	    spi_transfer(0xFF);
                           A  2250    .LINE 313
                           A  2251    
040916 01FF0000            A  2252    	LD	BC,255
04091A C5                  A  2253    	PUSH	BC
04091B CD 2C 3E 04         A  2254    	CALL	_spi_transfer
04091F C1                  A  2255    	POP	BC
                           A  2256    ;  314	
                           A  2257    ;  315	    return res1;
                           A  2258    .LINE 315
                           A  2259    
040920 DD7EFA              A  2260    	LD	A,(IX+%FFFFFFFA)
                           A  2261    ;  316	}
                           A  2262    .LINE 316
                           A  2263    
040923 DDF9                A  2264    	LD	SP,IX
040925 DDE1                A  2265    	POP	IX
040927 C9                  A  2266    	RET	
                           A  2267    
                           A  2268    
                           A  2269    ;**************************** _SD_readSingleBlo
                           A  2270    ;Name                         Addr/Register   S
                           A  2271    ;_SD_CS_disable                      IMPORT  --
                           A  2272    ;_SD_readRes1                        IMPORT  --
                           A  2273    ;_SD_command                         IMPORT  --
                           A  2274    ;_SD_CS_enable                       IMPORT  --
                           A  2275    ;_spi_transfer                       IMPORT  --
                           A  2276    ;res1                                  IX-6    
                           A  2277    ;readAttempts                          IX-5    
                           A  2278    ;i                                     IX-3    
                           A  2279    ;read                                  IX-1    
                           A  2280    ;token                                IX+15    
                           A  2281    ;buf                                  IX+12    
                           A  2282    ;addr                                  IX+6    
                           A  2283    
                           A  2284    
                           A  2285    ; Stack Frame Size: 24 (bytes)
                           A  2286    ;       Spill Code: 0 (instruction)
                           A  2287    
                           A  2288    
                           A  2289    .ENDFUNC "SD_readSingleBlock",316,"_SD_readSing
                           A  2290    ;  317	
                           A  2291    ;  318	BYTE SD_init(void) {
040928                     A  2292    _SD_init:
                           A  2293    .DEFINE "_SD_init"
                           A  2294    
                           A  2295    .VALUE _SD_init
                           A  2296    
                           A  2297    .CLASS 2
                           A  2298    
                           A  2299    .TYPE 76
                           A  2300    
                           A  2301    .ENDEF
                           A  2302    
                           A  2303    .BEGFUNC "SD_init",318,"_SD_init"
                           A  2304    
                           A  2305    .LINE 318
                           A  2306    
                           A  2307    .DEFINE "cmdAttempts"
                           A  2308    
                           A  2309    .CLASS 65
                           A  2310    
                           A  2311    .VALUE -1
                           A  2312    
                           A  2313    .TYPE 12
                           A  2314    
                           A  2315    .ENDEF
                           A  2316    
                           A  2317    .DEFINE "res"
                           A  2318    
                           A  2319    .CLASS 65
                           A  2320    
                           A  2321    .VALUE -6
                           A  2322    
                           A  2323    .DIM 5
                           A  2324    
                           A  2325    .TYPE 108
                           A  2326    
                           A  2327    .ENDEF
                           A  2328    
040928 DDE5                A  2329    	PUSH	IX
04092A DD210000 00         A  2330    	LD	IX,0
04092F DD39                A  2331    	ADD	IX,SP
040931 C5                  A  2332    	PUSH	BC
040932 C5                  A  2333    	PUSH	BC
                           A  2334    ;  319		BYTE res[5], cmdAttempts = 0;
                           A  2335    .LINE 319
                           A  2336    
040933 DD36FF00            A  2337    	LD	(IX+%FFFFFFFF),%0
                           A  2338    ;  320	
                           A  2339    ;  321		init_timer0(10, 16, 0x00);  // 10ms
                           A  2340    .LINE 321
                           A  2341    
040937 01000000            A  2342    	LD	BC,0
04093B C5                  A  2343    	PUSH	BC
04093C 01100000            A  2344    	LD	BC,16
040940 C5                  A  2345    	PUSH	BC
040941 010A0000            A  2346    	LD	BC,10
040945 C5                  A  2347    	PUSH	BC
040946 CD 3C 3F 04         A  2348    	CALL	_init_timer0
04094A C1                  A  2349    	POP	BC
04094B C1                  A  2350    	POP	BC
04094C C1                  A  2351    	POP	BC
                           A  2352    ;  322	
                           A  2353    ;  323		SD_powerUpSeq();
                           A  2354    .LINE 323
                           A  2355    
04094D CD 99 05 04         A  2356    	CALL	_SD_powerUpSeq
                           A  2357    ;  324		//
                           A  2358    ;  325	    // Command card to idle
                           A  2359    ;  326		//
                           A  2360    ;  327	    while((res[0] = SD_goIdleState()) !
                           A  2361    .LINE 327
                           A  2362    
040951 18 10               A  2363    	JR	L_73
040953                     A  2364    L_74:
                           A  2365    ;  328	        cmdAttempts++;
                           A  2366    .LINE 328
                           A  2367    
040953 DD34FF              A  2368    	INC	(IX+%FFFFFFFF)
                           A  2369    ;  329	        if(cmdAttempts > 10) return SD_
                           A  2370    .LINE 329
                           A  2371    
040956 3E0A                A  2372    	LD	A,%A
040958 DDBEFF              A  2373    	CP	A,(IX+%FFFFFFFF)
04095B 30 06               A  2374    	JR	NC,L_73
04095D 3E01                A  2375    	LD	A,%1
04095F C3 01 0A 04         A  2376    	JR	L_90
                           A  2377    ;  330	    }
040963                     A  2378    L_73:
                           A  2379    .LINE 330
                           A  2380    
040963 CD BC 03 04         A  2381    	CALL	_SD_goIdleState
040967 DD77FA              A  2382    	LD	(IX+%FFFFFFFA),A
04096A B7ED62              A  2383    	UEXT	HL
04096D 6F                  A  2384    	LD	L,A
04096E 01010000            A  2385    	LD	BC,1
040972 B7                  A  2386    	OR	A,A
040973 ED42                A  2387    	SBC	HL,BC
040975 20 DC               A  2388    	JR	NZ,L_74
                           A  2389    ;  331		//
                           A  2390    ;  332	    // Send interface conditions
                           A  2391    ;  333		//
                           A  2392    ;  334	    SD_sendIfCond(res);
                           A  2393    .LINE 334
                           A  2394    
040977 ED65FA              A  2395    	PEA	IX+%FFFFFFFA
04097A CD 19 04 04         A  2396    	CALL	_SD_sendIfCond
04097E C1                  A  2397    	POP	BC
                           A  2398    ;  335	    if(res[0] != 0x01) {
                           A  2399    .LINE 335
                           A  2400    
04097F DD7EFA              A  2401    	LD	A,(IX+%FFFFFFFA)
040982 B7ED62              A  2402    	UEXT	HL
040985 6F                  A  2403    	LD	L,A
040986 01010000            A  2404    	LD	BC,1
04098A B7                  A  2405    	OR	A,A
04098B ED42                A  2406    	SBC	HL,BC
04098D 28 04               A  2407    	JR	Z,L_78
                           A  2408    ;  336	        return SD_ERROR;
                           A  2409    .LINE 336
                           A  2410    
04098F 3E01                A  2411    	LD	A,%1
040991 18 6E               A  2412    	JR	L_90
                           A  2413    ;  337	    }
040993                     A  2414    L_78:
                           A  2415    .LINE 337
                           A  2416    
                           A  2417    ;  338		//
                           A  2418    ;  339	    // Check echo pattern
                           A  2419    ;  340		//
                           A  2420    ;  341	    if(res[4] != 0xAA) {
                           A  2421    .LINE 341
                           A  2422    
040993 ED22FE              A  2423    	LEA	HL,IX+%FFFFFFFE
040996 7E                  A  2424    	LD	A,(HL)
040997 B7ED62              A  2425    	UEXT	HL
04099A 6F                  A  2426    	LD	L,A
04099B 01AA0000            A  2427    	LD	BC,170
04099F B7                  A  2428    	OR	A,A
0409A0 ED42                A  2429    	SBC	HL,BC
0409A2 28 04               A  2430    	JR	Z,L_79
                           A  2431    ;  342	        return SD_ERROR;
                           A  2432    .LINE 342
                           A  2433    
0409A4 3E01                A  2434    	LD	A,%1
0409A6 18 59               A  2435    	JR	L_90
                           A  2436    ;  343	    }
0409A8                     A  2437    L_79:
                           A  2438    .LINE 343
                           A  2439    
                           A  2440    ;  344		//
                           A  2441    ;  345	    // Attempt to initialize card
                           A  2442    ;  346		//
                           A  2443    ;  347	    cmdAttempts = 0;
                           A  2444    .LINE 347
                           A  2445    
0409A8 DD36FF00            A  2446    	LD	(IX+%FFFFFFFF),%0
                           A  2447    ;  348	    do {
0409AC                     A  2448    L_85:
                           A  2449    .LINE 348
                           A  2450    
                           A  2451    ;  349	        if(cmdAttempts > 100) return SD
                           A  2452    .LINE 349
                           A  2453    
0409AC 3E64                A  2454    	LD	A,%64
0409AE DDBEFF              A  2455    	CP	A,(IX+%FFFFFFFF)
0409B1 30 04               A  2456    	JR	NC,L_81
0409B3 3E01                A  2457    	LD	A,%1
0409B5 18 4A               A  2458    	JR	L_90
0409B7                     A  2459    L_81:
                           A  2460    ;  350			//
                           A  2461    ;  351	        // Send app cmd
                           A  2462    ;  352			//
                           A  2463    ;  353	        res[0] = SD_sendApp();
                           A  2464    .LINE 353
                           A  2465    
0409B7 CD 7C 04 04         A  2466    	CALL	_SD_sendApp
0409BB DD77FA              A  2467    	LD	(IX+%FFFFFFFA),A
                           A  2468    ;  354			//
                           A  2469    ;  355	        // If no error in response
                           A  2470    ;  356			//
                           A  2471    ;  357	        if(res[0] < 2) {
                           A  2472    .LINE 357
                           A  2473    
0409BE B7ED62              A  2474    	UEXT	HL
0409C1 6F                  A  2475    	LD	L,A
0409C2 01020000            A  2476    	LD	BC,2
0409C6 B7                  A  2477    	OR	A,A
0409C7 ED42                A  2478    	SBC	HL,BC
0409C9 F2 D4 09 04         A  2479    	JP	P,L_83
                           A  2480    ;  358	            res[0] = SD_sendOpCond();
                           A  2481    .LINE 358
                           A  2482    
0409CD CD D9 04 04         A  2483    	CALL	_SD_sendOpCond
0409D1 DD77FA              A  2484    	LD	(IX+%FFFFFFFA),A
                           A  2485    ;  359	        }
0409D4                     A  2486    L_83:
                           A  2487    .LINE 359
                           A  2488    
                           A  2489    ;  360			//
                           A  2490    ;  361	        // Wait
                           A  2491    ;  362			//
                           A  2492    ;  363	        wait_timer0();
                           A  2493    .LINE 363
                           A  2494    
0409D4 CD E3 00 04         A  2495    	CALL	_wait_timer0
                           A  2496    ;  364	        cmdAttempts++;
                           A  2497    .LINE 364
                           A  2498    
0409D8 DD34FF              A  2499    	INC	(IX+%FFFFFFFF)
                           A  2500    ;  365	    }
                           A  2501    ;  366	    while(res[0] != SD_READY);
                           A  2502    .LINE 366
                           A  2503    
0409DB DD7EFA              A  2504    	LD	A,(IX+%FFFFFFFA)
0409DE B7                  A  2505    	OR	A,A
0409DF 20 CB               A  2506    	JR	NZ,L_85
                           A  2507    ;  367		//
                           A  2508    ;  368	    // Read OCR
                           A  2509    ;  369		//
                           A  2510    ;  370	    SD_readOCR(res);
                           A  2511    .LINE 370
                           A  2512    
0409E1 ED65FA              A  2513    	PEA	IX+%FFFFFFFA
0409E4 CD 3E 05 04         A  2514    	CALL	_SD_readOCR
0409E8 C1                  A  2515    	POP	BC
                           A  2516    ;  371	    //
                           A  2517    ;  372	    // Disable 10ms timer
                           A  2518    ;  373	    //
                           A  2519    ;  374	   	enable_timer0(0);
                           A  2520    .LINE 374
                           A  2521    
0409E9 01000000            A  2522    	LD	BC,0
0409ED C5                  A  2523    	PUSH	BC
0409EE CD C9 3F 04         A  2524    	CALL	_enable_timer0
0409F2 C1                  A  2525    	POP	BC
                           A  2526    ;  375		//
                           A  2527    ;  376	    // Check card is ready
                           A  2528    ;  377		//
                           A  2529    ;  378	    if(!(res[1] & 0x80)) return SD_ERRO
                           A  2530    .LINE 378
                           A  2531    
0409F3 ED22FA              A  2532    	LEA	HL,IX+%FFFFFFFA
0409F6 23                  A  2533    	INC	HL
0409F7 7E                  A  2534    	LD	A,(HL)
0409F8 E680                A  2535    	AND	A,%80
0409FA 20 04               A  2536    	JR	NZ,L_89
0409FC 3E01                A  2537    	LD	A,%1
0409FE 18 01               A  2538    	JR	L_90
040A00                     A  2539    L_89:
                           A  2540    ;  379	
                           A  2541    ;  380	    return SD_SUCCESS;	
                           A  2542    .LINE 380
                           A  2543    
040A00 AF                  A  2544    	XOR	A,A
                           A  2545    ;  381	}
040A01                     A  2546    L_90:
                           A  2547    .LINE 381
                           A  2548    
040A01 DDF9                A  2549    	LD	SP,IX
040A03 DDE1                A  2550    	POP	IX
040A05 C9                  A  2551    	RET	
                           A  2552    
                           A  2553    
                           A  2554    ;**************************** _SD_init ********
                           A  2555    ;Name                         Addr/Register   S
                           A  2556    ;_enable_timer0                      IMPORT  --
                           A  2557    ;_SD_readOCR                         IMPORT  --
                           A  2558    ;_wait_timer0                        IMPORT  --
                           A  2559    ;_SD_sendOpCond                      IMPORT  --
                           A  2560    ;_SD_sendApp                         IMPORT  --
                           A  2561    ;_SD_sendIfCond                      IMPORT  --
                           A  2562    ;_SD_goIdleState                     IMPORT  --
                           A  2563    ;_SD_powerUpSeq                      IMPORT  --
                           A  2564    ;_init_timer0                        IMPORT  --
                           A  2565    ;res                                   IX-6    
                           A  2566    ;cmdAttempts                           IX-1    
                           A  2567    
                           A  2568    
                           A  2569    ; Stack Frame Size: 12 (bytes)
                           A  2570    ;       Spill Code: 0 (instruction)
                           A  2571    
                           A  2572    
                           A  2573    .ENDFUNC "SD_init",381,"_SD_init"
                           A  2574    	XREF _wait_timer0:ROM
                           A  2575    	XREF _enable_timer0:ROM
                           A  2576    	XREF _init_timer0:ROM
                           A  2577    	XREF _SD_CS_disable:ROM
                           A  2578    	XREF _SD_CS_enable:ROM
                           A  2579    	XREF _spi_transfer:ROM
                           A  2580    	XREF __lshru:ROM
                           A  2581    	XREF __stoiu:ROM
                           A  2582    	XREF __setflag:ROM
                           A  2583    	XREF __ladd_b:ROM
                           A  2584    	XDEF _SD_init
                           A  2585    	XDEF _SD_readSingleBlock
                           A  2586    	XDEF _SD_writeSingleBlock
                           A  2587    	XDEF _SD_writeBlocks
                           A  2588    	XDEF _SD_readBlocks
                           A  2589    	XDEF _SD_powerUpSeq
                           A  2590    	XDEF _SD_readOCR
                           A  2591    	XDEF _SD_sendOpCond
                           A  2592    	XDEF _SD_sendApp
                           A  2593    	XDEF _SD_sendIfCond
                           A  2594    	XDEF _SD_goIdleState
                           A  2595    	XDEF _SD_readRes7
                           A  2596    	XDEF _SD_readRes1
                           A  2597    	XDEF _SD_command
                           A  2598    	END


Errors: 0
Warnings: 0
Lines Assembled: 2599
